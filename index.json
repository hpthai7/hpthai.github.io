[{"categories":["documentation"],"content":"Discover what the Hugo - LoveIt theme is all about and the core-concepts behind it.","date":"2020-03-06","objectID":"/theme-documentation-basics/","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"Discover what the Hugo - LoveIt theme is all about and the core-concepts behind it. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:0:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"1 Requirements Thanks to the simplicity of Hugo, Hugo is the only dependency of this theme. Just install latest version of  Hugo (\u003e 0.62.0) for your OS (Windows, Linux, macOS). Why not support earlier versions of Hugo? Since Markdown Render Hooks was introduced in the Hugo Christmas Edition, this theme only supports Hugo versions above 0.62.0. Hugo extended version is recommended Since some features of this theme need to processes  SCSS to  CSS, it is recommended to use Hugo extended version for better experience. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:1:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2 Installation The following steps are here to help you initialize your new website. If you don’t know Hugo at all, we strongly suggest you learn more about it by following this great documentation for beginners. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.1 Create Your Project Hugo provides a new command to create a new website: hugo new site my_website cd my_website ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.2 Install the Theme The LoveIt theme’s repository is: https://github.com/dillonzq/LoveIt. You can download the latest release  .zip file of the theme and extract it in the themes directory. Alternatively, clone this repository to the themes directory: git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt Or, create an empty git repository and make this repository a submodule of your site directory: git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.3 Basic Configuration The following is a basic configuration for the LoveIt theme: baseURL = \"http://example.org/\" # [en, zh-cn, fr, ...] determines default content language defaultContentLanguage = \"en\" # language code languageCode = \"en\" title = \"My New Hugo Site\" # Change the default theme to be use when building the site with Hugo theme = \"LoveIt\" [params] # LoveIt theme version version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"Posts\" url = \"/posts/\" # title will be shown when you hover on this menu link title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" weight = 3 # Markup related configuration in Hugo [markup] # Syntax Highlighting (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false is a necessary configuration (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false Note When building the website, you can set a theme by using --theme option. However, we suggest you modify the configuration file (config.toml) and set the theme as the default. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:3","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.4 Create Your First Post Here is the way to create your first post: hugo new posts/first_post.md Feel free to edit the post file by adding some sample content and replacing the title value in the beginning of the file. Note By default all posts and pages are created as a draft. If you want to render these pages, remove the property draft: true from the metadata, set the property draft: false or add -D/--buildDrafts parameter to hugo command. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:4","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.5 Launching the Website Locally Launch by using the following command: hugo serve Go to http://localhost:1313. Basic configuration previewBasic configuration preview \" Basic configuration preview Tip When you run hugo serve, when the contents of the files change, the page automatically refreshes with the changes. Note Since the theme use .Scratch in Hugo to implement some features, it is highly recommended that you add --disableFastRender parameter to hugo server command for the live preview of the page you are editing. hugo serve --disableFastRender ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:5","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.6 Build the Website When your site is ready to deploy, run the following command: hugo A public folder will be generated, containing all static content and assets for your website. It can now be deployed on any web server. Tip The website can be automatically published and hosted with Netlify (Read more about Automated HUGO deployments with Netlify). Alternatively, you can use AWS Amplify, Github pages, Render and more… ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:6","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3 Configuration ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.1 Site Configuration In addition to Hugo global configuration and menu configuration, LoveIt lets you define the following parameters in your site configuration (here is a config.toml, whose values are default). Please open the code block below to view the complete sample configuration : [params] # LoveIt theme version version = \"0.2.X\" # site description description = \"This is My New Hugo Site\" # site keywords keywords = [\"Theme\", \"Hugo\"] # site default theme (\"light\", \"dark\", \"auto\") defaultTheme = \"auto\" # public git repo url only then enableGitInfo is true gitRepo = \"\" # which hash function used for SRI, when empty, no SRI is used # (\"sha256\", \"sha384\", \"sha512\", \"md5\") fingerprint = \"\" # date format dateFormat = \"2006-01-02\" # website images for Open Graph and Twitter Cards images = [\"/logo.png\"] # App icon config [params.app] # optional site title override for the app when added to an iOS home screen or Android launcher title = \"LoveIt\" # whether to omit favicon resource links noFavicon = false # modern SVG favicon to use in place of older style .png and .ico files svgFavicon = \"\" # Android browser theme color themeColor = \"#ffffff\" # Safari mask icon color iconColor = \"#5bbad5\" # Windows v8-10 tile color tileColor = \"#da532c\" # Search config [params.search] enable = true # type of search engine (\"lunr\", \"algolia\") type = \"lunr\" # max index length of the chunked content contentLength = 4000 # placeholder of the search bar placeholder = \"\" # max number of results length maxResultLength = 10 # snippet length of the result snippetLength = 30 # HTML tag name of the highlight part in results highlightTag = \"em\" # whether to use the absolute URL based on the baseURL in search index absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" # Header config [params.header] # desktop header mode (\"fixed\", \"normal\", \"auto\") desktopMode = \"fixed\" # mobile header mode (\"fixed\", \"normal\", \"auto\") mobileMode = \"auto\" # Header title config [params.header.title] # URL of the LOGO logo = \"\" # title name name = \"\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" # whether to use typeit animation for title name typeit = false # Footer config [params.footer] enable = true # Custom content (HTML format is supported) custom = '' # whether to show Hugo and theme info hugo = true # whether to show copyright info copyright = true # whether to show the author author = true # Site creation time since = 2019 # ICP info only in China (HTML format is supported) icp = \"\" # license info (HTML format is supported) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (all posts) page config [params.section] # special amount of posts in each section page paginate = 20 # date format (month and day) dateFormat = \"01-02\" # amount of RSS pages rss = 10 # List (category or tag) page config [params.list] # special amount of posts in each list page paginate = 20 # date format (month and day) dateFormat = \"01-02\" # amount of RSS pages rss = 10 # Home page config [params.home] # amount of RSS pages rss = 10 # Home page profile [params.home.profile] enable = true # Gravatar Email for preferred avatar in home page gravatarEmail = \"\" # URL of avatar shown in home page avatarURL = \"/images/avatar.png\" # title shown in home page (HTML format is supported) title = \"\" # subtitle shown in home page subtitle = \"This is My New Hugo Site\" # whether to use typeit animation for subtitle typeit = true # whether to show social links social = true # disclaimer (HTML format is supported) disclaimer = \"\" # Home page posts [params.home.posts] enable = true # special amount of posts in each home posts page paginate = 6 # replaced with hiddenFromHomePage in params.page # default behavior when you don't set ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.2 Favicons, Browserconfig, Manifest It is recommended to put your own favicons: apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) into /static. They’re easily created via https://realfavicongenerator.net/. Customize browserconfig.xml and site.webmanifest to set theme-color and background-color. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.3 Add Logo and Cover for SEO Add a logo image (127x40) and a cover image (800x600) in the static directory. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:3","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.4 Style Customization Note Hugo extended version is necessary for the style customization. LoveIt theme has been built to be as configurable as possible by defining custom .scss style files. The directory including the custom .scss style files is assets/css relative to your project root directory. In assets/css/_override.scss, you can override the variables in themes/LoveIt/assets/css/_variables.scss to customize the style. Here is a example: @import url('https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext'); $code-font-family: Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; In assets/css/_custom.scss, you can add some css style code to customize the style. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:4","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4 Multilingual and i18n LoveIt theme is fully compatible with Hugo multilingual mode, which provides in-browser language switching. Language SwitchLanguage Switch \" Language Switch ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.1 Compatibility Language Hugo Code HTML lang Attribute Theme Docs Lunr.js Support English en en Simplified Chinese zh-cn zh-CN French fr fr Polish pl pl Brazilian Portuguese pt-br pt-BR Italian it it Spanish es es German de de German de de Serbian sr sr Russian ru ru Romanian ro ro ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.2 Basic Configuration After learning how Hugo handle multilingual websites, define your languages in your site configuration. For example with English, Chinese and French website: # [en, zh-cn, fr, pl, ...] determines default content language defaultContentLanguage = \"en\" [languages] [languages.en] weight = 1 title = \"My New Hugo Site\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" weight = 1 [[languages.en.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" weight = 2 [[languages.en.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" weight = 3 [languages.zh-cn] weight = 2 title = \"我的全新 Hugo 网站\" # language code, CN only here languageCode = \"zh-CN\" languageName = \"简体中文\" # whether to include Chinese/Japanese/Korean hasCJKLanguage = true [[languages.zh-cn.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"文章\" url = \"/posts/\" title = \"\" weight = 1 [[languages.zh-cn.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[languages.zh-cn.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 [languages.fr] weight = 3 title = \"Mon nouveau site Hugo\" languageCode = \"fr\" languageName = \"Français\" [[languages.fr.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Postes\" url = \"/posts/\" title = \"\" weight = 1 [[languages.fr.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Balises\" url = \"/tags/\" title = \"\" weight = 2 [[languages.fr.menu.main]] identifier = \"categories\" name = \"Catégories\" pre = \"\" post = \"\" url = \"/categories/\" title = \"\" weight = 3 Then, for each new page, append the language code to the file name. Single file my-page.md is split in three files: in English: my-page.en.md in Chinese: my-page.zh-cn.md in French: my-page.fr.md Note Be aware that only translated pages are displayed in menu. It’s not replaced with default language content. Tip Use Front Matter parameter to translate urls too. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.3 Overwrite Translation Strings Translations strings are used for common default values used in the theme. Translations are available in some languages, but you may use another language or want to override default values. To override these values, create a new file in your local i18n folder i18n/\u003clanguageCode\u003e.toml and inspire yourself from themes/LoveIt/i18n/en.toml. By the way, as these translations could be used by other people, please take the time to propose a translation by  making a PR to the theme! ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:3","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5 Search Based on Lunr.js or algolia, searching is supported in LoveIt theme. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.1 Output Configuration In order to generate index.json for searching, add JSON output file type to the home of the outputs part in your site configuration. [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.2 Search Configuration Based on index.json generated by Hugo, you could activate searching. Here is the search configuration in your site configuration: [params.search] enable = true # type of search engine (\"lunr\", \"algolia\") type = \"lunr\" # max index length of the chunked content contentLength = 4000 # placeholder of the search bar placeholder = \"\" # max number of results length maxResultLength = 10 # snippet length of the result snippetLength = 30 # HTML tag name of the highlight part in results highlightTag = \"em\" # whether to use the absolute URL based on the baseURL in search index absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" How to choose search engine? The following is a comparison of two search engines: lunr: simple, no need to synchronize index.json, no limit for contentLength, but high bandwidth and low performance (Especially for Chinese which needs a large segmentit library) algolia: high performance and low bandwidth, but need to synchronize index.json and limit for contentLength The content of the post is separated by h2 and h3 HTML tag to improve query performance and basically implement full-text search. contentLength is used to limit the max index length of the part starting with h2 and h3 HTML tag. Tips about algolia You need to upload index.json files to algolia to activate searching. You could upload the index.json files by browsers but a CLI tool may be better. Algolia Atomic is a good choice. To be compatible with Hugo multilingual mode, you need to upload different index.json for each language to the different index of algolia, such as zh-cn/index.json or fr/index.json… ","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"Find out how to create and organize your content quickly and intuitively in LoveIt theme.","date":"2020-03-05","objectID":"/theme-documentation-content/","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Find out how to create and organize your content quickly and intuitively in LoveIt theme. ","date":"2020-03-05","objectID":"/theme-documentation-content/:0:0","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"1 Contents Organization A few suggestions to help you get a good looking site quickly: Keep post pages in the content/posts directory, for example: content/posts/my-first-post.md Keep static pages in the content directory, for example: content/about.md Keep media like images in the static directory, for example: static/images/screenshot.png ","date":"2020-03-05","objectID":"/theme-documentation-content/:1:0","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"2 Front Matter Hugo allows you to add front matter in yaml, toml or json to your content files. Note Not all of the below front matters need to be set in each of your posts. It is necessary only if the front matters and the page part in your site configuration are inconsistent. Here is a front matter example: ---title:\"My First Post\"subtitle:\"\"date:2020-03-04T15:58:26+08:00lastmod:2020-03-04T15:58:26+08:00draft:trueauthor:\"\"authorLink:\"\"description:\"\"license:\"\"images:[]tags:[]categories:[]featuredImage:\"\"featuredImagePreview:\"\"hiddenFromHomePage:falsehiddenFromSearch:falsetwemoji:falselightgallery:trueruby:truefraction:truefontawesome:truelinkToMarkdown:truerssFullText:falsetoc:enable:trueauto:truecode:copy:true# ...math:enable:true# ...mapbox:accessToken:\"\"# ...share:enable:true# ...comment:enable:true# ...library:css:# someCSS = \"some.css\"# located in \"assets/\"# Or# someCSS = \"https://cdn.example.com/some.css\"js:# someJS = \"some.js\"# located in \"assets/\"# Or# someJS = \"https://cdn.example.com/some.js\"--- title: the title for the content. subtitle: the subtitle for the content. date: the datetime assigned to this page, which is usually fetched from the date field in front matter, but this behaviour is configurabl in the site configuration. lastmod: the datetime at which the content was last modified. draft: if true, the content will not be rendered unless the --buildDrafts/-D flag is passed to the hugo command. author: the author for the content. authorLink: the link of the author. description: the description for the content. license: the special lisence for this content. images: page images for Open Graph and Twitter Cards. tags: the tags for the content. categories: the categories for the content. featuredImage: the featured image for the content. featuredImagePreview: the featured image for the content preview in the home page. hiddenFromHomePage: if true, the content will not be shown in the home page. hiddenFromSearch: if true, the content will not be shown in the search results. twemoji: if true, the content will enable the twemoji. lightgallery: if true, images in the content will be shown as the gallery. ruby: if true, the content will enable the ruby extended syntax. fraction: if true, the content will enable the fraction extended syntax. fontawesome: if true, the content will enable the Font Awesome extended syntax. linkToMarkdown: if true, the footer of the content will be shown the link to the orignal Markdown file. rssFullText: if true, the full text content will be shown in RSS. toc: the same as the params.page.toc part in the site configuration. code: the same as the params.page.code part in the site configuration. math: the same as the params.page.math part in the site configuration. mapbox: the same as the params.page.mapbox part in the site configuration. share: the same as the params.page.share part in the site configuration. comment: the same as the params.page.comment part in the site configuration. library: the same as the params.page.library part in the site configuration. ","date":"2020-03-05","objectID":"/theme-documentation-content/:2:0","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"3 Content Summaries LoveIt theme uses the summary of the content to display abstract information in the home page. Hugo can generate summaries of your content. Summary PreviewSummary Preview \" Summary Preview ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:0","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Automatic Summary Splitting By default, Hugo automatically takes the first 70 words of your content as its summary. You may customize the summary length by setting summaryLength in the site configuration. If you are creating content in a CJKChinese/Japanese/Korean language and want to use Hugo’s automatic summary splitting, set hasCJKLanguage to true in your site configuration. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:1","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Manual Summary Splitting Alternatively, you may add the \u003c!--more--\u003e summary divider where you want to split the article. Content that comes before the summary divider will be used as that content’s summary. Note Be careful to enter \u003c!--more--\u003e exactly; i.e., all lowercase and with no whitespace. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:2","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Front Matter Summary You might want your summary to be something other than the text that starts the article. In this case you can provide a separate summary in the summary variable of the article front matter. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:3","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Use Description as Summary You might want your description in the description variable of the article front matter as the summary. You may add the \u003c!--more--\u003e summary divider at the start of the article. Keep content that comes before the summary divider empty. Then LoveIt theme will use your description as the summary. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:4","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Priority Order of Summary Selection Because there are multiple ways in which a summary can be specified it is useful to understand the order. It is as follows: If there is a \u003c!--more--\u003e summary divider present in the article but no content is before the divider, the description will be used as the summary. If there is a \u003c!--more--\u003e summary divider present in the article the text up to the divider will be provided as per the manual summary split method. If there is a summary variable in the article front matter the value of the variable will be provided as per the front matter summary method. The text at the start of the article will be provided as per the automatic summary split method. Note It is not recommended to include rich text block elements in the summary, which will cause typographic errors. Such as code blocks, pictures, tables, etc. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:5","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"4 Basic Markdown Syntax This part is shown in the basic markdown syntax page. ","date":"2020-03-05","objectID":"/theme-documentation-content/:4:0","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"5 Extended Markdown Syntax LoveIt theme has some extended syntax elements for you to write articles. ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:0","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Emoji Support This part is shown in the emoji support page. ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:1","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Mathematical Formula LoveIt theme supports mathematical formulas based on $ \\KaTeX $. Set the property enable = true under [params.math] in your site configuration and the property math: true of the article front matter to enable the automatic rendering of mathematical formulas. Tip Here is a list of $ \\TeX $ functions supported by $ \\KaTeX $. Block Formula The default block delimiters are $$/$$ and \\\\[/\\\\]: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\\\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\] The rendered output looks like this: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] Inline Formula The default inline delimiters are $/$ and \\\\(/\\\\): $ c = \\pm\\sqrt{a^2 + b^2} $ and \\\\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\) The rendered output looks like this: $ c = \\pm\\sqrt{a^2 + b^2} $ and \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) Tip You can add more block and inline delimiters in your site configuration. Copy-tex Copy-tex is an extension for $ \\KaTeX $. By the extension, when selecting and copying $ \\KaTeX $ rendered elements, copies their $ \\LaTeX $ source to the clipboard. Set the property copyTex = true under [params.math] in your site configuration to enable Copy-tex. Select and copy the formula rendered in the previous section, and you can find that the copied content is the LaTeX source code. mhchem mhchem is an extension for $ \\KaTeX $. By the extension, you can write beautiful chemical equations easily in the article. Set the property mhchem = true under [params.math] in your site configuration to enable mhchem. $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ The rendered output looks like this: $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:2","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Ruby Annotation An extended Markdown syntax for ruby annotation is supported in LoveIt theme: [Hugo]^(An open-source static site generator) The rendered output looks like this: HugoAn open-source static site generator ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:3","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Fraction An extended Markdown syntax for fraction is supported in LoveIt theme: [Light]/[Dark] [99]/[100] The rendered output looks like this: Light/Dark 90/100 ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:4","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Font Awesome LoveIt theme uses Font Awesome as the icon library. You can easily use these icons in your articles. Get the class of icons you wanted from the Font Awesome website. Gone camping! :(fas fa-campground fa-fw): Be back soon. That is so funny! :(far fa-grin-tears): The rendered output looks like this: Gone camping!  Be back soon. That is so funny! ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:5","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Escape character In some special cases (when writing this theme documentation ), your content will conflict with basic or extended Markdown syntax, and it is inevitable. The escape character syntax can help you build the content you wanted: {?X} -\u003e X For example, two : will enable emoji syntax, which is not the behavior you want. The escape character syntax is like this: {?:}joy: The rendered output looks like this: :joy: instead of 😂 Tip This is related to an issue for Hugo, which has not been resolved. Another example is: [link{?]}(#escape-character) The rendered output looks like this: [link](#escape-character) instead of link. ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:6","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Hugo provides multiple built-in shortcodes for author convenience and to keep your markdown content clean.","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"Hugo provides multiple built-in shortcodes for author convenience and to keep your markdown content clean. Hugo uses Markdown for its simple content format. However, there are a lot of things that Markdown doesn’t support well. You could use pure HTML to expand possibilities. But this happens to be a bad idea. Everyone uses Markdown because it’s pure and simple to read even non-rendered. You should avoid HTML to keep it as simple as possible. To avoid this limitations, Hugo created shortcodes. A shortcode is a simple snippet that can generate reasonable HTML code and conforms to Markdown’s design philosophy. Hugo ships with a set of predefined shortcodes that represent very common usage. These shortcodes are provided for author convenience and to keep your markdown content clean. ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:0:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"1 figure Documentation of figure Example figure input: {{\u003c figure src=\"/images/theme-documentation-built-in-shortcodes/lighthouse.jpg\" title=\"Lighthouse (figure)\" \u003e}} The rendered output looks like this: Lighthouse (figure) The HTML looks like this: \u003cfigure\u003e \u003cimg src=\"/images/theme-documentation-built-in-shortcodes/lighthouse.jpg\"/\u003e \u003cfigcaption\u003e \u003ch4\u003eLighthouse (figure)\u003c/h4\u003e \u003c/figcaption\u003e \u003c/figure\u003e ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:1:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"2 gist Documentation of gist Example gist input: {{\u003c gist spf13 7896402 \u003e}} The rendered output looks like this: The HTML looks like this: \u003cscript type=\"application/javascript\" src=\"https://gist.github.com/spf13/7896402.js\"\u003e\u003c/script\u003e ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:2:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"3 highlight Documentation of highlight Example highlight input: {{\u003c highlight html \u003e}} \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e {{\u003c /highlight \u003e}} The rendered output looks like this: \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:3:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"4 instagram Documentation of instagram Example instagram input: {{\u003c instagram BWNjjyYFxVx hidecaption \u003e}} The rendered output looks like this: View this post on Instagram A post shared by Bjørn Erik Pedersen (@bepsays) on Jul 6, 2017 at 9:27am PDT ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:4:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"5 param Documentation of param Example param input: {{\u003c param description \u003e}} The rendered output looks like this: Hugo provides multiple built-in shortcodes for author convenience and to keep your markdown content clean. ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:5:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"6 ref and relref Documentation of ref and relref ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:6:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"7 tweet Documentation of tweet Example tweet input: {{\u003c tweet 877500564405444608 \u003e}} The rendered output looks like this: Hugo 0.24 Released: Big archetype update + @Netlify _redirects etc. file supporthttps://t.co/X94FmYDEZJ #gohugo #golang @spf13 @bepsays — GoHugo.io (@GoHugoIO) June 21, 2017 ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:7:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"8 vimeo Documentation of vimeo Example vimeo input: {{\u003c vimeo 146022717 \u003e}} The rendered output looks like this: ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:8:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"9 youtube Documentation of youtube Example youtube input: {{\u003c youtube w7Ft2ymGmfc \u003e}} The rendered output looks like this: ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:9:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"LoveIt theme provides multiple shortcodes on top of built-in ones in Hugo.","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"LoveIt theme provides multiple shortcodes on top of built-in ones in Hugo. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:0:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"1 style Note Hugo extended version is necessary for style shortcode. style is a shortcode to insert custom style in your post. The style shortcode has two positional parameters. The first one is the custom style content, which supports nesting syntax in  SASS and \u0026 referring to this parent HTML element. And the second one is the tag name of the HTML element wrapping the content you want to change style, and whose default value is div. Example style input: {{\u003c style \"text-align:right; strong{color:#00b1ff;}\" \u003e}} This is a **right-aligned** paragraph. {{\u003c /style \u003e}} The rendered output looks like this: This is a right-aligned paragraph. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:1:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"2 link link shortcode is an alternative to Markdown link syntax. link shortcode can provide some other features and can be used in code blocks. The link shortcode has the following named parameters: href [required] (first positional parameter) Destination of the link. content [optional] (second positional parameter) Content of the link, default value is the value of href parameter. Markdown or HTML format is supported. title [optional] (third positional parameter) title attribute of the HTML a tag, which will be shown when hovering on the link. class [optional] class attribute of the HTML a tag. rel [optional] Additional rel attributes of the HTML a tag. Example link input: {{\u003c link \"https://assemble.io\" \u003e}} Or {{\u003c link href=\"https://assemble.io\" \u003e}} {{\u003c link \"mailto:contact@revolunet.com\" \u003e}} Or {{\u003c link href=\"mailto:contact@revolunet.com\" \u003e}} {{\u003c link \"https://assemble.io\" Assemble \u003e}} Or {{\u003c link href=\"https://assemble.io\" content=Assemble \u003e}} The rendered output looks like this: https://assemble.io mailto:contact@revolunet.com Assemble Example link input with a title: {{\u003c link \"https://github.com/upstage/\" Upstage \"Visit Upstage!\" \u003e}} Or {{\u003c link href=\"https://github.com/upstage/\" content=Upstage title=\"Visit Upstage!\" \u003e}} The rendered output looks like this (hover over the link, there should be a tooltip): Upstage ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:2:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"3 image image shortcode is an alternative to figure shortcode. image shortcode can take full advantage of the dependent libraries of lazysizes and lightgallery.js. The image shortcode has the following named parameters: src [required] (first positional parameter) URL of the image to be displayed. alt [optional] (second positional parameter) Alternate text for the image if the image cannot be displayed, default value is the value of src parameter. Markdown or HTML format is supported. caption [optional] (third positional parameter) Image caption. Markdown or HTML format is supported. title [optional] Image title that will be shown when hovering on the image. class [optional] class attribute of the HTML figure tag. src_s [optional] URL of the image thumbnail, used for lightgallery, default value is the value of src parameter. src_l [optional] URL of the HD image, used for lightgallery, default value is the value of src parameter. height [optional] height attribute of the image. width [optional] width attribute of the image. linked [optional] Whether the image needs to be hyperlinked, default value is true. rel [optional] Additional rel attributes of the HTML a tag, if linked parameter is set to true. large [optional] Whether the image is large used for loading animation, if linked parameter is set to false. Example image input: {{\u003c image src=\"/images/theme-documentation-extended-shortcodes/lighthouse.jpg\" caption=\"Lighthouse (`image`)\" src-s=\"/images/theme-documentation-extended-shortcodes/lighthouse-small.jpg\" src-l=\"/images/theme-documentation-extended-shortcodes/lighthouse-large.jpg\" \u003e}} The rendered output looks like this: Lighthouse (image)\" Lighthouse (image) ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:3:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"4 admonition The admonition shortcode supports 12 types of banners to help you put notice in your page. Markdown or HTML format in the content is supported. Note A note banner Abstract An abstract banner Info A info banner Tip A tip banner Success A success banner Question A question banner Warning A warning banner Failure A failure banner Danger A danger banner Bug A bug banner Example An example banner Quote A quote banner The admonition shortcode has the following named parameters: type [optional] (first positional parameter) Type of the admonition banner, default value is note. title [optional] (second positional parameter) Title of the admonition banner, default value is the value of type parameter. open [optional] (third positional parameter) Whether the content will be expandable by default, default value is true. Example admonition input: {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} A **tip** banner {{\u003c /admonition \u003e}} Or {{\u003c admonition tip \"This is a tip\" false \u003e}} A **tip** banner {{\u003c /admonition \u003e}} The rendered output looks like this: This is a tip A tip banner ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:4:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5 mermaid mermaid is a library helping you to generate diagram and flowcharts from text, in a similar manner as Markdown. Just insert your mermaid code in the mermaid shortcode and that’s it. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.1 Flowchart Example flowchart mermaid input: {{\u003c mermaid \u003e}} graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:1","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.2 Sequence Diagram Example sequence diagram mermaid input: {{\u003c mermaid \u003e}} sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:2","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.3 GANTT Example GANTT mermaid input: {{\u003c mermaid \u003e}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:3","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.4 Class Diagram Example class diagram mermaid input: {{\u003c mermaid \u003e}} classDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:4","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.5 State Diagram Example state diagram mermaid input: {{\u003c mermaid \u003e}} stateDiagram [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:5","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.6 Git Graph Example git graph mermaid input: {{\u003c mermaid \u003e}} gitGraph: options { \"nodeSpacing\": 100, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:6","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.7 Pie Example pie mermaid input: {{\u003c mermaid \u003e}} pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:7","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"6 echarts ECharts is a library helping you to generate interactive data visualization. The basic chart types ECharts supports include line series, bar series, scatter series, pie charts, candle-stick series, boxplot series for statistics, map series, heatmap series, lines series for directional information, graph series for relationships, treemap series, sunburst series, parallel series for multi-dimensional data, funnel series, gauge series. And it’s extremely easy to create a combinition of them with ECharts. Just insert your ECharts option in JSON/YAML/TOML format in the echarts shortcode and that’s it. Example echarts input in JSON format: {{\u003c echarts \u003e}} { \"title\": { \"text\": \"Summary Line Chart\", \"top\": \"2%\", \"left\": \"center\" }, \"tooltip\": { \"trigger\": \"axis\" }, \"legend\": { \"data\": [\"Email Marketing\", \"Affiliate Advertising\", \"Video Advertising\", \"Direct View\", \"Search Engine\"], \"top\": \"10%\" }, \"grid\": { \"left\": \"5%\", \"right\": \"5%\", \"bottom\": \"5%\", \"top\": \"20%\", \"containLabel\": true }, \"toolbox\": { \"feature\": { \"saveAsImage\": { \"title\": \"Save as Image\" } } }, \"xAxis\": { \"type\": \"category\", \"boundaryGap\": false, \"data\": [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] }, \"yAxis\": { \"type\": \"value\" }, \"series\": [ { \"name\": \"Email Marketing\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [120, 132, 101, 134, 90, 230, 210] }, { \"name\": \"Affiliate Advertising\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [220, 182, 191, 234, 290, 330, 310] }, { \"name\": \"Video Advertising\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [150, 232, 201, 154, 190, 330, 410] }, { \"name\": \"Direct View\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [320, 332, 301, 334, 390, 330, 320] }, { \"name\": \"Search Engine\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [820, 932, 901, 934, 1290, 1330, 1320] } ] } {{\u003c /echarts \u003e}} The same in YAML format: {{\u003cecharts\u003e}}title:text:SummaryLineCharttop:2%left:centertooltip:trigger:axislegend:data:- EmailMarketing- AffiliateAdvertising- VideoAdvertising- DirectView- SearchEnginetop:10%grid:left:5%right:5%bottom:5%top:20%containLabel:truetoolbox:feature:saveAsImage:title:SaveasImagexAxis:type:categoryboundaryGap:falsedata:- Monday- Tuesday- Wednesday- Thursday- Friday- Saturday- SundayyAxis:type:valueseries:- name:EmailMarketingtype:linestack:Totaldata:- 120- 132- 101- 134- 90- 230- 210- name:AffiliateAdvertisingtype:linestack:Totaldata:- 220- 182- 191- 234- 290- 330- 310- name:VideoAdvertisingtype:linestack:Totaldata:- 150- 232- 201- 154- 190- 330- 410- name:DirectViewtype:linestack:Totaldata:- 320- 332- 301- 334- 390- 330- 320- name:SearchEnginetype:linestack:Totaldata:- 820- 932- 901- 934- 1290- 1330- 1320{{\u003c/echarts\u003e}} The same in TOML format: {{\u003c echarts \u003e}} [title] text = \"Summary Line Chart\" top = \"2%\" left = \"center\" [tooltip] trigger = \"axis\" [legend] data = [ \"Email Marketing\", \"Affiliate Advertising\", \"Video Advertising\", \"Direct View\", \"Search Engine\" ] top = \"10%\" [grid] left = \"5%\" right = \"5%\" bottom = \"5%\" top = \"20%\" containLabel = true [toolbox] [toolbox.feature] [toolbox.feature.saveAsImage] title = \"Save as Image\" [xAxis] type = \"category\" boundaryGap = false data = [ \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\" ] [yAxis] type = \"value\" [[series]] name = \"Email Marketing\" type = \"line\" stack = \"Total\" data = [ 120.0, 132.0, 101.0, 134.0, 90.0, 230.0, 210.0 ] [[series]] name = \"Affiliate Advertising\" type = \"line\" stack = \"Total\" data = [ 220.0, 182.0, 191.0, 234.0, 290.0, 330.0, 310.0 ] [[series]] name = \"Video Advertising\" type = \"line\" stack = \"Total\" data = [ 150.0, 232.0, 201.0, 154.0, 190.0, 330.0, 410.0 ] [[series]] name = \"Direct View\" type = \"line\" stack = \"Total\" data = [ 320.0, 332.0, 301.0, 334.0, 390.0, 330.0, 320.0 ] [[series]] name = \"Search Engine\" type = \"line\" stack = \"Total\" data = [ 820.0, 932.0, 901.0, 934.0, 1290.0, 1330.0, 1320.0 ] {{\u003c /echarts \u003e}} The rendered output looks like this: The echarts shortcode has also the following nam","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:6:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"7 mapbox Mapbox GL JS is a JavaScript library that uses WebGL to render interactive maps from vector tiles and Mapbox styles. The mapbox shortcode has the following named parameters to use Mapbox GL JS: lng [required] (first positional parameter) Longitude of the inital centerpoint of the map, measured in degrees. lat [required] (second positional parameter) Latitude of the inital centerpoint of the map, measured in degrees. zoom [optional] (third positional parameter) The initial zoom level of the map, default value is 10. marked [optional] (fourth positional parameter) Whether to add a marker at the inital centerpoint of the map, default value is true. light-style [optional] (fifth positional parameter) Style for the light theme, default value is the value set in the front matter or the site configuration. dark-style [optional] (sixth positional parameter) Style for the dark theme, default value is the value set in the front matter or the site configuration. navigation [optional] Whether to add NavigationControl, default value is the value set in the front matter or the site configuration. geolocate [optional] Whether to add GeolocateControl, default value is the value set in the front matter or the site configuration. scale [optional] Whether to add ScaleControl, default value is the value set in the front matter or the site configuration. fullscreen [optional] Whether to add FullscreenControl, default value is the value set in the front matter or the site configuration. width [optional] Width of the map, default value is 100%. height [optional] Height of the map, default value is 20rem. Example simple mapbox input: {{\u003c mapbox 121.485 31.233 12 \u003e}} Or {{\u003c mapbox lng=121.485 lat=31.233 zoom=12 \u003e}} The rendered output looks like this: Example mapbox input with the custom style: {{\u003c mapbox -122.252 37.453 10 false \"mapbox://styles/mapbox/navigation-preview-day-v4\" \"mapbox://styles/mapbox/navigation-preview-night-v4\" \u003e}} Or {{\u003c mapbox lng=-122.252 lat=37.453 zoom=10 marked=false light-style=\"mapbox://styles/mapbox/navigation-preview-day-v4\" dark-style=\"mapbox://styles/mapbox/navigation-preview-night-v4\" \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:7:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8 music The music shortcode embeds a responsive music player based on APlayer and MetingJS. There are three ways to use it the music shortcode. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.1 Custom Music URL The music shortcode has the following named parameters by custom music URL: server [required] URL of the custom music. name [optional] Name of the custom music. artist [optional] Artist of the custom music. cover [required] URL of the custom music cover. Example music input by custom music URL: {{\u003c music url=\"/music/Wavelength.mp3\" name=Wavelength artist=oldmanyoung cover=\"/images/theme-documentation-extended-shortcodes/Wavelength.jpg\" \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:1","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.2 Music Platform URL Automatic Identification The music shortcode has one named parameter by music platform URL automatic identification: auto [required] (first positional parameter) URL of the music platform URL for automatic identification, which supports netease, tencent and xiami music platform. Example music input by music platform URL automatic identification: {{\u003c music auto=\"https://music.163.com/#/playlist?id=60198\" \u003e}} Or {{\u003c music \"https://music.163.com/#/playlist?id=60198\" \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:2","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.3 Custom Server, Type and ID The music shortcode has the following named parameters by custom music platform: server [required] (first positional parameter) [netease, tencent, kugou, xiami, baidu] Music platform. type [required] (second positional parameter) [song, playlist, album, search, artist] Type of the music. id [required] (third positional parameter) Song ID, or playlist ID, or album ID, or search keyword, or artist ID. Example music input by custom music platform: {{\u003c music server=\"netease\" type=\"song\" id=\"1868553\" \u003e}} Or {{\u003c music netease song 1868553 \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:3","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.4 Other Parameters The music shortcode has other named parameters applying to the above three ways: theme [optional] Main color of the music player, default value is #448aff. fixed [optional] Whether to enable fixed mode, default value is false. mini [optional] Whether to enable mini mode, default value is false. autoplay [optional] Whether to autoplay music, default value is false. volume [optional] Default volume when the player is first opened, which will be remembered in the browser, default value is 0.7. mutex [optional] Whether to pause other players when this player starts playing, default value is true. The music shortcode has the following named parameters only applying to the type of music list: loop [optional] [all, one, none] Loop mode of the music list, default value is none. order [optional] [list, random] Play order of the music list, default value is list. list-folded [optional] Whether the music list should be folded at first, default value is false. list-max-height [optional] Max height of the music list, default value is 340px. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:4","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"9 bilibili The bilibili shortcode embeds a responsive video player for bilibili videos. When the video only has one part, only the BV id of the video is required, e.g.: https://www.bilibili.com/video/BV1Sx411T7QQ Example bilibili input: {{\u003c bilibili BV1Sx411T7QQ \u003e}} Or {{\u003c bilibili id=BV1Sx411T7QQ \u003e}} The rendered output looks like this: When the video has multiple parts, in addition to the BV id of the video, p is also required, whose default value is 1, e.g.: https://www.bilibili.com/video/BV1TJ411C7An?p=3 Example bilibili input with p: {{\u003c bilibili BV1TJ411C7An 3 \u003e}} Or {{\u003c bilibili id=BV1TJ411C7An p=3 \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:9:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10 typeit The typeit shortcode provides typing animation based on TypeIt. Just insert your content in the typeit shortcode and that’s it. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10.1 Simple Content Simple content is allowed in Markdown format and without rich block content such as images and more… Example typeit input: {{\u003c typeit \u003e}} This is a *paragraph* with **typing animation** based on [TypeIt](https://typeitjs.com/)... {{\u003c /typeit \u003e}} The rendered output looks like this: Alternatively, you can use custom HTML tags. Example typeit input with h4 tag: {{\u003c typeit tag=h4 \u003e}} This is a *paragraph* with **typing animation** based on [TypeIt](https://typeitjs.com/)... {{\u003c /typeit \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:1","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10.2 Code Content Code content is allowed and will be highlighted by named parameter code for the type of code language. Example typeit input with code: {{\u003c typeit code=java \u003e}} public class HelloWorld { public static void main(String []args) { System.out.println(\"Hello World\"); } } {{\u003c /typeit \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:2","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10.3 Group Content All typing animations start at the same time by default. But sometimes you may want to start a set of typeit contents in order. A set of typeit contents with the same value of named parameter group will start typing animation in sequence. Example typeit input with group: {{\u003c typeit group=paragraph \u003e}} **First** this paragraph begins {{\u003c /typeit \u003e}} {{\u003c typeit group=paragraph \u003e}} **Then** this paragraph begins {{\u003c /typeit \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:3","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"11 script script is a shortcode to insert custom  Javascript in your post. Note The script content can be guaranteed to be executed in order after all third-party libraries are loaded. So you are free to use third-party libraries. Example script input: {{\u003c script \u003e}} console.log('Hello LoveIt!'); {{\u003c /script \u003e}} You can see the output in the console of the developer tool. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:11:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["Markdown"],"content":"This article shows the basic Markdown syntax and format.","date":"2019-12-01","objectID":"/basic-markdown-syntax/","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files. Note This article is a shameful copy of the great Grav original page. If you want to know about the extented Markdown syntax of LoveIt theme, please read extended Markdown syntax page. Let’s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages. Markdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it. Some of the key benefits are: Markdown is simple to learn, with minimal extra characters, so it’s also quicker to write content. Less chance of errors when writing in Markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use! John Gruber, the author of Markdown, puts it like this: The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. – John Gruber Without further delay, let us go over the main elements of Markdown and what the resulting HTML looks like! Tip  Bookmark this page for easy future reference! ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:0:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"1 Headings Headings from h2 through h6 are constructed with a # for each level: ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading The HTML looks like this: \u003ch2\u003eh2 Heading\u003c/h2\u003e \u003ch3\u003eh3 Heading\u003c/h3\u003e \u003ch4\u003eh4 Heading\u003c/h4\u003e \u003ch5\u003eh5 Heading\u003c/h5\u003e \u003ch6\u003eh6 Heading\u003c/h6\u003e Heading IDs To add a custom heading ID, enclose the custom ID in curly braces on the same line as the heading: ### A Great Heading {#custom-id} The HTML looks like this: \u003ch3 id=\"custom-id\"\u003eA Great Heading\u003c/h3\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:1:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"2 Comments Comments should be HTML compatible. \u003c!-- This is a comment --\u003e Comment below should NOT be seen: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:2:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"3 Horizontal Rules The HTML \u003chr\u003e element is for creating a “thematic break” between paragraph-level elements. In Markdown, you can create a \u003chr\u003e with any of the following: ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks The rendered output looks like this: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:3:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"4 Body Copy Body copy written as normal, plain text will be wrapped with \u003cp\u003e\u003c/p\u003e tags in the rendered HTML. So this body copy: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. The HTML looks like this: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e A line break can be done with one blank line. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:4:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"5 Inline HTML If you need a certain HTML tag (with a class) you can simply use HTML: Paragraph in Markdown. \u003cdiv class=\"class\"\u003e This is \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Paragraph in Markdown. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:5:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"6 Emphasis ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Bold For emphasizing a snippet of text with a heavier font-weight. The following snippet of text is rendered as bold text. **rendered as bold text** __rendered as bold text__ The HTML looks like this: \u003cstrong\u003erendered as bold text\u003c/strong\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Italics For emphasizing a snippet of text with italics. The following snippet of text is rendered as italicized text. *rendered as italicized text* _rendered as italicized text_ The HTML looks like this: \u003cem\u003erendered as italicized text\u003c/em\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Strikethrough In GFMGitHub flavored Markdown you can do strikethroughs. ~~Strike through this text.~~ The rendered output looks like this: Strike through this text. The HTML looks like this: \u003cdel\u003eStrike through this text.\u003c/del\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Combination Bold, italics, and strikethrough can be used in combination. ***bold and italics*** ~~**strikethrough and bold**~~ ~~*strikethrough and italics*~~ ~~***bold, italics and strikethrough***~~ The rendered output looks like this: bold and italics strikethrough and bold strikethrough and italics bold, italics and strikethrough The HTML looks like this: \u003cem\u003e\u003cstrong\u003ebold and italics\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003estrikethrough and bold\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003estrikethrough and italics\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003ebold, italics and strikethrough\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:4","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"7 Blockquotes For quoting blocks of content from another source within your document. Add \u003e before any text you want to quote: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The rendered output looks like this: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The HTML looks like this: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e Blockquotes can also be nested: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. The rendered output looks like this: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:7:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"8 Lists ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Unordered A list of items in which the order of the items does not explicitly matter. You may use any of the following symbols to denote bullets for each list item: * valid bullet - valid bullet + valid bullet For example: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Ordered A list of items in which the order of items does explicitly matter. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e Tip If you just use 1. for each number, Markdown will automatically number each item. For example: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Task Lists Task lists allow you to create a list of items with checkboxes. To create a task list, add dashes (-) and brackets with a space ([ ]) before task list items. To select a checkbox, add an x in between the brackets ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media The rendered output looks like this: Write the press release Update the website Contact the media ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"9 Code ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Inline Code Wrap inline snippets of code with `. In this example, `\u003csection\u003e\u003c/section\u003e` should be wrapped as **code**. The rendered output looks like this: In this example, \u003csection\u003e\u003c/section\u003e should be wrapped as code. The HTML looks like this: \u003cp\u003e In this example, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e should be wrapped with \u003cstrong\u003ecode\u003c/strong\u003e. \u003c/p\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Indented Code Or indent several lines of code by at least four spaces, as in: // Some comments line 1 of code line 2 of code line 3 of code The rendered output looks like this: // Some comments line 1 of code line 2 of code line 3 of code The HTML looks like this: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Block Fenced Code Use “fences” ``` to block in multiple lines of code with a language attribute. ```markdown Sample text here... ``` The HTML looks like this: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Syntax Highlighting GFMGitHub Flavored Markdown also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code “fence”, ```js, and syntax highlighting will automatically be applied in the rendered HTML. For example, to apply syntax highlighting to JavaScript code: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` The rendered output looks like this: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; Note Syntax highlighting page in Hugo Docs introduces more about syntax highlighting, including highlight shortcode. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:4","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"10 Tables Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. The HTML looks like this: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e Right or center aligned text Adding a colon on the right side of the dashes below any heading will right align text for that column. Adding colons on both sides of the dashes below any heading will center align text for that column. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:10:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"11 Links ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Basic Link \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) The rendered output looks like this (hover over the link, there is no tooltip): https://assemble.io contact@revolunet.com Assemble The HTML looks like this: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Add a Title [Upstage](https://github.com/upstage/ \"Visit Upstage!\") The rendered output looks like this (hover over the link, there should be a tooltip): Upstage The HTML looks like this: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Named Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) will jump to these sections: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. Note The specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"12 Footnotes Footnotes allow you to add notes and references without cluttering the body of the document. When you create a footnote, a superscript number with a link appears where you added the footnote reference. Readers can click the link to jump to the content of the footnote at the bottom of the page. To create a footnote reference, add a caret and an identifier inside brackets ([^1]). Identifiers can be numbers or words, but they can’t contain spaces or tabs. Identifiers only correlate the footnote reference with the footnote itself — in the output, footnotes are numbered sequentially. Add the footnote using another caret and number inside brackets with a colon and text ([^1]: My footnote.). You don’t have to put footnotes at the end of the document. You can put them anywhere except inside other elements like lists, block quotes, and tables. This is a digital footnote[^1]. This is a footnote with \"label\"[^label] [^1]: This is a digital footnote [^label]: This is a footnote with \"label\" This is a digital footnote1. This is a footnote with “label”2 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:12:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"13 Images Images have a similar syntax to links but include a preceding exclamation point. ![Minion](https://octodex.github.com/images/minion.png) or: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The StormtroopocatAlt text \" The Stormtroopocat Like links, images also have a footnote style syntax: ![Alt text][id] The DojocatAlt text \" The Dojocat With a reference later in the document defining the URL location: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" Tip LoveIt theme has special shortcode for image, which provides more features. This is a digital footnote ↩︎ This is a footnote with “label” ↩︎ ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:13:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Linux"],"content":"Navigation ","date":"2017-09-08","objectID":"/common-utilities-for-linux-terminal/:1:0","tags":["terminal"],"title":"Common Utilities for Linux Terminal","uri":"/common-utilities-for-linux-terminal/"},{"categories":["Linux"],"content":"Autojump Navigation in terminals using command cd is a real hassle when we have to switch back and forth between multiple directories. Autojump is a convenient tool to jump to a visited directory. While cd is handy to jump to a near relative location, i.e. a children or the parent, autojump complements cd when users jumps to farly different locations. It is not necessarily meant to be a complete replacement of cd. Autojump takes advantage of the history of visits, ranks the list of visited sites. Users need to cd for a while before the database is collected. The next time, the long typed cd can be shortened to j \u003cdirectory-component\u003e Where directory-component can be e constituent part in the expected directory, i.e. /home/udev/workspace/project-\u003cdirectory-component\u003e. ","date":"2017-09-08","objectID":"/common-utilities-for-linux-terminal/:1:1","tags":["terminal"],"title":"Common Utilities for Linux Terminal","uri":"/common-utilities-for-linux-terminal/"},{"categories":["Linux"],"content":"HyperJump HyperJump is another navigation gadget for terminal. Unlike autojump, HyperJump uses manually bookmarked locations. Users have to tag location with custom names before using. It also provides a user interface based on the package dialog, allows choosing the locations visually. It features three commands for bookmarking and jumping. # Bookmark current directory jr jr TagName # Unbookmarking current directory jf # Unbookmarking directory with tag jf TagName # Open dialog interface to choose location jj # Jump immediately to directory jj TagName ","date":"2017-09-08","objectID":"/common-utilities-for-linux-terminal/:1:2","tags":["terminal"],"title":"Common Utilities for Linux Terminal","uri":"/common-utilities-for-linux-terminal/"},{"categories":["Markdown"],"content":"Guide to emoji usage in Hugo and LoveIt.","date":"2019-10-01","objectID":"/emoji-support/","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Emoji can be enabled in a Hugo project in a number of ways. The emojify function can be called directly in templates or Inline Shortcodes. To enable emoji globally, set enableEmoji to true in your site configuration and then you can type emoji shorthand codes directly in content files. These begin and end with a colon and include the code of an emoji: Gone camping! :tent: Be back soon. That is so funny! :joy: The rendered output looks like this: Gone camping! ⛺ Be back soon. That is so funny! 😂 The following cheat sheet is a useful reference for emoji shorthand codes. ","date":"2019-10-01","objectID":"/emoji-support/:0:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Smileys \u0026 Emotion ","date":"2019-10-01","objectID":"/emoji-support/:1:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Smiling icon code icon code 😀 grinning 😃 smiley 😄 smile 😁 grin 😆 laughing satisfied 😅 sweat_smile 🤣 rofl 😂 joy 🙂 slightly_smiling_face 🙃 upside_down_face 😉 wink 😊 blush 😇 innocent ","date":"2019-10-01","objectID":"/emoji-support/:1:1","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Affection icon code icon code 😍 heart_eyes 😘 kissing_heart 😗 kissing ☺️ relaxed 😚 kissing_closed_eyes 😙 kissing_smiling_eyes ","date":"2019-10-01","objectID":"/emoji-support/:1:2","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Tongue icon code icon code 😋 yum 😛 stuck_out_tongue 😜 stuck_out_tongue_winking_eye 😝 stuck_out_tongue_closed_eyes 🤑 money_mouth_face ","date":"2019-10-01","objectID":"/emoji-support/:1:3","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Hand icon code icon code 🤗 hugs 🤔 thinking ","date":"2019-10-01","objectID":"/emoji-support/:1:4","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Neutral Skeptical icon code icon code 🤐 zipper_mouth_face 😐 neutral_face 😑 expressionless 😶 no_mouth 😏 smirk 😒 unamused 🙄 roll_eyes 😬 grimacing 🤥 lying_face ","date":"2019-10-01","objectID":"/emoji-support/:1:5","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Sleepy icon code icon code 😌 relieved 😔 pensive 😪 sleepy 🤤 drooling_face 😴 sleeping ","date":"2019-10-01","objectID":"/emoji-support/:1:6","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Unwell icon code icon code 😷 mask 🤒 face_with_thermometer 🤕 face_with_head_bandage 🤢 nauseated_face 🤧 sneezing_face 😵 dizzy_face ","date":"2019-10-01","objectID":"/emoji-support/:1:7","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Hat icon code icon code 🤠 cowboy_hat_face ","date":"2019-10-01","objectID":"/emoji-support/:1:8","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Glasses icon code icon code 😎 sunglasses 🤓 nerd_face ","date":"2019-10-01","objectID":"/emoji-support/:1:9","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Concerned icon code icon code 😕 confused 😟 worried 🙁 slightly_frowning_face ☹ frowning_face 😮 open_mouth 😯 hushed 😲 astonished 😳 flushed 😦 frowning 😧 anguished 😨 fearful 😰 cold_sweat 😥 disappointed_relieved 😢 cry 😭 sob 😱 scream 😖 confounded 😣 persevere 😞 disappointed 😓 sweat 😩 weary 😫 tired_face ","date":"2019-10-01","objectID":"/emoji-support/:1:10","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Negative icon code icon code 😤 triumph 😡 pout rage 😠 angry 😈 smiling_imp 👿 imp 💀 skull ☠️ skull_and_crossbones ","date":"2019-10-01","objectID":"/emoji-support/:1:11","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Costume icon code icon code 💩 hankey poop shit 🤡 clown_face 👹 japanese_ogre 👺 japanese_goblin 👻 ghost 👽 alien 👾 space_invader 🤖 robot ","date":"2019-10-01","objectID":"/emoji-support/:1:12","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Cat Face icon code icon code 😺 smiley_cat 😸 smile_cat 😹 joy_cat 😻 heart_eyes_cat 😼 smirk_cat 😽 kissing_cat 🙀 scream_cat 😿 crying_cat_face 😾 pouting_cat ","date":"2019-10-01","objectID":"/emoji-support/:1:13","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Monkey Face icon code icon code 🙈 see_no_evil 🙉 hear_no_evil 🙊 speak_no_evil ","date":"2019-10-01","objectID":"/emoji-support/:1:14","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Emotion icon code icon code 💋 kiss 💌 love_letter 💘 cupid 💝 gift_heart 💖 sparkling_heart 💗 heartpulse 💓 heartbeat 💞 revolving_hearts 💕 two_hearts 💟 heart_decoration ❣️ heavy_heart_exclamation 💔 broken_heart ❤️ heart 💛 yellow_heart 💚 green_heart 💙 blue_heart 💜 purple_heart 🖤 black_heart 💯 100 💢 anger 💥 boom collision 💫 dizzy 💦 sweat_drops 💨 dash 🕳️ hole 💣 bomb 💬 speech_balloon 👁️‍🗨️ eye_speech_bubble 🗯️ right_anger_bubble 💭 thought_balloon 💤 zzz ","date":"2019-10-01","objectID":"/emoji-support/:1:15","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"People \u0026 Body ","date":"2019-10-01","objectID":"/emoji-support/:2:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Hand Fingers Open icon code icon code 👋 wave 🤚 raised_back_of_hand 🖐️ raised_hand_with_fingers_splayed ✋ hand raised_hand 🖖 vulcan_salute ","date":"2019-10-01","objectID":"/emoji-support/:2:1","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Hand Fingers Partial icon code icon code 👌 ok_hand ✌️ v 🤞 crossed_fingers 🤘 metal 🤙 call_me_hand ","date":"2019-10-01","objectID":"/emoji-support/:2:2","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Hand Single Finger icon code icon code 👈 point_left 👉 point_right 👆 point_up_2 🖕 fu middle_finger 👇 point_down ☝️ point_up ","date":"2019-10-01","objectID":"/emoji-support/:2:3","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Hand Fingers Closed icon code icon code 👍 +1 thumbsup 👎 -1 thumbsdown ✊ fist fist_raised 👊 facepunch fist_oncoming punch 🤛 fist_left 🤜 fist_right ","date":"2019-10-01","objectID":"/emoji-support/:2:4","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Hands icon code icon code 👏 clap 🙌 raised_hands 👐 open_hands 🤝 handshake 🙏 pray ","date":"2019-10-01","objectID":"/emoji-support/:2:5","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Hand Prop icon code icon code ✍️ writing_hand 💅 nail_care 🤳 selfie ","date":"2019-10-01","objectID":"/emoji-support/:2:6","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Body Parts icon code icon code 💪 muscle 👂 ear 👃 nose 👀 eyes 👁️ eye 👅 tongue 👄 lips ","date":"2019-10-01","objectID":"/emoji-support/:2:7","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Person icon code icon code 👶 baby 👦 boy 👧 girl :blonde_man: blonde_man person_with_blond_hair 👨 man 👩 woman 👱‍♀️ blonde_woman 👴 older_man 👵 older_woman ","date":"2019-10-01","objectID":"/emoji-support/:2:8","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Person Gesture icon code icon code 🙍‍♀️ frowning_woman person_frowning 🙍‍♂️ frowning_man 🙎‍♀️ person_with_pouting_face pouting_woman 🙎‍♂️ pouting_man 🙅‍♀️ ng_woman no_good no_good_woman 🙅‍♂️ ng_man no_good_man 🙆‍♀️ ok_woman 🙆‍♂️ ok_man 💁‍♀️ information_desk_person sassy_woman tipping_hand_woman 💁‍♂️ sassy_man tipping_hand_man 🙋‍♀️ raising_hand raising_hand_woman 🙋‍♂️ raising_hand_man 🙇‍♂️ bow bowing_man 🙇‍♀️ bowing_woman 🤦‍♂️ man_facepalming 🤦‍♀️ woman_facepalming 🤷‍♂️ man_shrugging 🤷‍♀️ woman_shrugging ","date":"2019-10-01","objectID":"/emoji-support/:2:9","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Person Role icon code icon code 👨‍⚕️ man_health_worker 👩‍⚕️ woman_health_worker 👨‍🎓 man_student 👩‍🎓 woman_student 👨‍🏫 man_teacher 👩‍🏫 woman_teacher 👨‍⚖️ man_judge 👩‍⚖️ woman_judge 👨‍🌾 man_farmer 👩‍🌾 woman_farmer 👨‍🍳 man_cook 👩‍🍳 woman_cook 👨‍🔧 man_mechanic 👩‍🔧 woman_mechanic 👨‍🏭 man_factory_worker 👩‍🏭 woman_factory_worker 👨‍💼 man_office_worker 👩‍💼 woman_office_worker 👨‍🔬 man_scientist 👩‍🔬 woman_scientist 👨‍💻 man_technologist 👩‍💻 woman_technologist 👨‍🎤 man_singer 👩‍🎤 woman_singer 👨‍🎨 man_artist 👩‍🎨 woman_artist 👨‍✈️ man_pilot 👩‍✈️ woman_pilot 👨‍🚀 man_astronaut 👩‍🚀 woman_astronaut 👨‍🚒 man_firefighter 👩‍🚒 woman_firefighter 👮‍♂️ cop policeman 👮‍♀️ policewoman 🕵 detective male_detective 🕵️‍♀️ female_detective 💂‍♂️ guardsman 💂‍♀️ guardswoman 👷‍♂️ construction_worker construction_worker_man 👷‍♀️ construction_worker_woman 🤴 prince 👸 princess 👳‍♂️ man_with_turban 👳‍♀️ woman_with_turban 👲 man_with_gua_pi_mao 🤵 man_in_tuxedo 👰 bride_with_veil 🤰 pregnant_woman ","date":"2019-10-01","objectID":"/emoji-support/:2:10","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Person Fantasy icon code icon code 👼 angel 🎅 santa 🤶 mrs_claus ","date":"2019-10-01","objectID":"/emoji-support/:2:11","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Person Activity icon code icon code 💆‍♀️ massage massage_woman 💆‍♂️ massage_man 💇‍♀️ haircut haircut_woman 💇‍♂️ haircut_man 🚶‍♂️ walking walking_man 🚶‍♀️ walking_woman 🏃‍♂️ runner running running_man 🏃‍♀️ running_woman 💃 dancer 🕺 man_dancing 🕴️ business_suit_levitating 👯‍♀️ dancers dancing_women 👯‍♂️ dancing_men ","date":"2019-10-01","objectID":"/emoji-support/:2:12","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Person Sport icon code icon code 🤺 person_fencing 🏇 horse_racing ⛷️ skier 🏂 snowboarder 🏌️‍♂️ golfing_man 🏌️‍♀️ golfing_woman 🏄‍♂️ surfer surfing_man 🏄‍♀️ surfing_woman 🚣‍♂️ rowboat rowing_man 🚣‍♀️ rowing_woman 🏊‍♂️ swimmer swimming_man 🏊‍♀️ swimming_woman ⛹️‍♂️ basketball_man ⛹️‍♀️ basketball_woman 🏋️‍♂️ weight_lifting_man 🏋️‍♀️ weight_lifting_woman 🚴‍♂️ bicyclist biking_man 🚴‍♀️ biking_woman 🚵‍♂️ mountain_bicyclist mountain_biking_man 🚵‍♀️ mountain_biking_woman 🤸‍♂️ man_cartwheeling 🤸‍♀️ woman_cartwheeling 🤼‍♂️ men_wrestling 🤼‍♀️ women_wrestling 🤽‍♂️ man_playing_water_polo 🤽‍♀️ woman_playing_water_polo 🤾‍♂️ man_playing_handball 🤾‍♀️ woman_playing_handball 🤹‍♂️ man_juggling 🤹‍♀️ woman_juggling ","date":"2019-10-01","objectID":"/emoji-support/:2:13","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Person Resting icon code icon code 🛀 bath 🛌 sleeping_bed ","date":"2019-10-01","objectID":"/emoji-support/:2:14","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Family icon code icon code 👭 two_women_holding_hands 👫 couple 👬 two_men_holding_hands 👩‍❤️‍💋‍👨 couplekiss_man_woman 👨‍❤️‍💋‍👨 couplekiss_man_man 👩‍❤️‍💋‍👩 couplekiss_woman_woman 👩‍❤️‍👨 couple_with_heart couple_with_heart_woman_man 👨‍❤️‍👨 couple_with_heart_man_man 👩‍❤️‍👩 couple_with_heart_woman_woman 👨‍👩‍👦 family family_man_woman_boy 👨‍👩‍👧 family_man_woman_girl 👨‍👩‍👧‍👦 family_man_woman_girl_boy 👨‍👩‍👦‍👦 family_man_woman_boy_boy 👨‍👩‍👧‍👧 family_man_woman_girl_girl 👨‍👨‍👦 family_man_man_boy 👨‍👨‍👧 family_man_man_girl 👨‍👨‍👧‍👦 family_man_man_girl_boy 👨‍👨‍👦‍👦 family_man_man_boy_boy 👨‍👨‍👧‍👧 family_man_man_girl_girl 👩‍👩‍👦 family_woman_woman_boy 👩‍👩‍👧 family_woman_woman_girl 👩‍👩‍👧‍👦 family_woman_woman_girl_boy 👩‍👩‍👦‍👦 family_woman_woman_boy_boy 👩‍👩‍👧‍👧 family_woman_woman_girl_girl 👨‍👦 family_man_boy 👨‍👦‍👦 family_man_boy_boy 👨‍👧 family_man_girl 👨‍👧‍👦 family_man_girl_boy 👨‍👧‍👧 family_man_girl_girl 👩‍👦 family_woman_boy 👩‍👦‍👦 family_woman_boy_boy 👩‍👧 family_woman_girl 👩‍👧‍👦 family_woman_girl_boy 👩‍👧‍👧 family_woman_girl_girl ","date":"2019-10-01","objectID":"/emoji-support/:2:15","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Person Symbol icon code icon code 🗣 speaking_head 👤 bust_in_silhouette 👥 busts_in_silhouette 👣 footprints ","date":"2019-10-01","objectID":"/emoji-support/:2:16","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Animals \u0026 Nature ","date":"2019-10-01","objectID":"/emoji-support/:3:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Animal Mammal icon code icon code 🐵 monkey_face 🐒 monkey 🦍 gorilla 🐶 dog 🐕 dog2 🐩 poodle 🐺 wolf 🦊 fox_face 🐱 cat 🐈 cat2 🦁 lion 🐯 tiger 🐅 tiger2 🐆 leopard 🐴 horse 🐎 racehorse 🦄 unicorn 🦌 deer 🐮 cow 🐂 ox 🐃 water_buffalo 🐄 cow2 🐷 pig 🐖 pig2 🐗 boar 🐽 pig_nose 🐏 ram 🐑 sheep 🐐 goat 🐪 dromedary_camel 🐫 camel 🐘 elephant 🦏 rhinoceros 🐭 mouse 🐁 mouse2 🐀 rat 🐹 hamster 🐰 rabbit 🐇 rabbit2 🐿️ chipmunk 🦇 bat 🐻 bear 🐨 koala 🐼 panda_face 🐾 feet paw_prints ","date":"2019-10-01","objectID":"/emoji-support/:3:1","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Animal Bird icon code icon code 🦃 turkey 🐔 chicken 🐓 rooster 🐣 hatching_chick 🐤 baby_chick 🐥 hatched_chick 🐦 bird 🐧 penguin 🕊 dove 🦅 eagle 🦆 duck 🦉 owl ","date":"2019-10-01","objectID":"/emoji-support/:3:2","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Animal Amphibian icon code icon code 🐸 frog ","date":"2019-10-01","objectID":"/emoji-support/:3:3","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Animal Reptile icon code icon code 🐊 crocodile 🐢 turtle 🦎 lizard 🐍 snake 🐲 dragon_face 🐉 dragon ","date":"2019-10-01","objectID":"/emoji-support/:3:4","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Animal Marine icon code icon code 🐳 whale 🐋 whale2 🐬 dolphin flipper 🐟 fish 🐠 tropical_fish 🐡 blowfish 🦈 shark 🐙 octopus 🐚 shell ","date":"2019-10-01","objectID":"/emoji-support/:3:5","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Animal Bug icon code icon code 🐌 snail 🦋 butterfly 🐛 bug 🐜 ant 🐝 bee honeybee 🐞 beetle 🕷️ spider 🕸️ spider_web 🦂 scorpion ","date":"2019-10-01","objectID":"/emoji-support/:3:6","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Plant Flower icon code icon code 💐 bouquet 🌸 cherry_blossom 💮 white_flower 🏵️ rosette 🌹 rose 🥀 wilted_flower 🌺 hibiscus 🌻 sunflower 🌼 blossom 🌷 tulip ","date":"2019-10-01","objectID":"/emoji-support/:3:7","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Plant Other icon code icon code 🌱 seedling 🌲 evergreen_tree 🌳 deciduous_tree 🌴 palm_tree 🌵 cactus 🌾 ear_of_rice 🌿 herb ☘️ shamrock 🍀 four_leaf_clover 🍁 maple_leaf 🍂 fallen_leaf 🍃 leaves ","date":"2019-10-01","objectID":"/emoji-support/:3:8","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Food \u0026 Drink ","date":"2019-10-01","objectID":"/emoji-support/:4:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Food Fruit icon code icon code 🍇 grapes 🍈 melon 🍉 watermelon 🍊 mandarin orange tangerine 🍋 lemon 🍌 banana 🍍 pineapple 🍎 apple 🍏 green_apple 🍐 pear 🍑 peach 🍒 cherries 🍓 strawberry 🥝 kiwi_fruit 🍅 tomato ","date":"2019-10-01","objectID":"/emoji-support/:4:1","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Food Vegetable icon code icon code 🥑 avocado 🍆 eggplant 🥔 potato 🥕 carrot 🌽 corn 🌶️ hot_pepper 🥒 cucumber 🍄 mushroom 🥜 peanuts 🌰 chestnut ","date":"2019-10-01","objectID":"/emoji-support/:4:2","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Food Prepared icon code icon code 🍞 bread 🥐 croissant 🥖 baguette_bread 🥞 pancakes 🧀 cheese 🍖 meat_on_bone 🍗 poultry_leg 🥓 bacon 🍔 hamburger 🍟 fries 🍕 pizza 🌭 hotdog 🌮 taco 🌯 burrito 🥙 stuffed_flatbread 🥚 egg 🍳 fried_egg 🥘 shallow_pan_of_food 🍲 stew 🥗 green_salad 🍿 popcorn ","date":"2019-10-01","objectID":"/emoji-support/:4:3","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Food Asian icon code icon code 🍱 bento 🍘 rice_cracker 🍙 rice_ball 🍚 rice 🍛 curry 🍜 ramen 🍝 spaghetti 🍠 sweet_potato 🍢 oden 🍣 sushi 🍤 fried_shrimp 🍥 fish_cake 🍡 dango ","date":"2019-10-01","objectID":"/emoji-support/:4:4","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Food Marine icon code icon code 🦀 crab 🦐 shrimp 🦑 squid ","date":"2019-10-01","objectID":"/emoji-support/:4:5","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Food Sweet icon code icon code 🍦 icecream 🍧 shaved_ice 🍨 ice_cream 🍩 doughnut 🍪 cookie 🎂 birthday 🍰 cake 🍫 chocolate_bar 🍬 candy 🍭 lollipop 🍮 custard 🍯 honey_pot ","date":"2019-10-01","objectID":"/emoji-support/:4:6","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Drink icon code icon code 🍼 baby_bottle 🥛 milk_glass ☕ coffee 🍵 tea 🍶 sake 🍾 champagne 🍷 wine_glass 🍸 cocktail 🍹 tropical_drink 🍺 beer 🍻 beers 🥂 clinking_glasses 🥃 tumbler_glass ","date":"2019-10-01","objectID":"/emoji-support/:4:7","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Dishware icon code icon code 🍽️ plate_with_cutlery 🍴 fork_and_knife 🥄 spoon 🔪 hocho knife 🏺 amphora ","date":"2019-10-01","objectID":"/emoji-support/:4:8","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Travel \u0026 Places ","date":"2019-10-01","objectID":"/emoji-support/:5:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Place Map icon code icon code 🌍 earth_africa 🌎 earth_americas 🌏 earth_asia 🌐 globe_with_meridians 🗺️ world_map 🗾 japan ","date":"2019-10-01","objectID":"/emoji-support/:5:1","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Place Geographic icon code icon code 🏔 mountain_snow ⛰️ mountain 🌋 volcano 🗻 mount_fuji 🏕️ camping ⛱ beach_umbrella 🏜️ desert 🏝️ desert_island 🏞️ national_park ","date":"2019-10-01","objectID":"/emoji-support/:5:2","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Place Building icon code icon code 🏟️ stadium 🏛️ classical_building 🏗️ building_construction 🏘 houses 🏚 derelict_house 🏠 house 🏡 house_with_garden 🏢 office 🏣 post_office 🏤 european_post_office 🏥 hospital 🏦 bank 🏨 hotel 🏩 love_hotel 🏪 convenience_store 🏫 school 🏬 department_store 🏭 factory 🏯 japanese_castle 🏰 european_castle 💒 wedding 🗼 tokyo_tower 🗽 statue_of_liberty ","date":"2019-10-01","objectID":"/emoji-support/:5:3","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Place Religious icon code icon code ⛪ church 🕌 mosque 🕍 synagogue ⛩️ shinto_shrine 🕋 kaaba ","date":"2019-10-01","objectID":"/emoji-support/:5:4","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Place Other icon code icon code ⛲ fountain ⛺ tent 🌁 foggy 🌃 night_with_stars 🏙️ cityscape 🌄 sunrise_over_mountains 🌅 sunrise 🌆 city_sunset 🌇 city_sunrise 🌉 bridge_at_night ♨️ hotsprings 🎠 carousel_horse 🎡 ferris_wheel 🎢 roller_coaster 💈 barber 🎪 circus_tent ","date":"2019-10-01","objectID":"/emoji-support/:5:5","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Transport Ground icon code icon code 🚂 steam_locomotive 🚃 railway_car 🚄 bullettrain_side 🚅 bullettrain_front 🚆 train2 🚇 metro 🚈 light_rail 🚉 station 🚊 tram 🚝 monorail 🚞 mountain_railway 🚋 train 🚌 bus 🚍 oncoming_bus 🚎 trolleybus 🚐 minibus 🚑 ambulance 🚒 fire_engine 🚓 police_car 🚔 oncoming_police_car 🚕 taxi 🚖 oncoming_taxi 🚗 car red_car 🚘 oncoming_automobile 🚙 blue_car 🚚 truck 🚛 articulated_lorry 🚜 tractor 🏎️ racing_car 🏍 motorcycle 🛵 motor_scooter 🚲 bike 🛴 kick_scooter 🚏 busstop 🛣️ motorway 🛤️ railway_track 🛢️ oil_drum ⛽ fuelpump 🚨 rotating_light 🚥 traffic_light 🚦 vertical_traffic_light 🛑 stop_sign 🚧 construction ","date":"2019-10-01","objectID":"/emoji-support/:5:6","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Transport Water icon code icon code ⚓ anchor ⛵ boat sailboat 🛶 canoe 🚤 speedboat 🛳️ passenger_ship ⛴️ ferry 🛥️ motor_boat 🚢 ship ","date":"2019-10-01","objectID":"/emoji-support/:5:7","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Transport Air icon code icon code ✈️ airplane 🛩️ small_airplane 🛫 flight_departure 🛬 flight_arrival 💺 seat 🚁 helicopter 🚟 suspension_railway 🚠 mountain_cableway 🚡 aerial_tramway 🛰️ artificial_satellite 🚀 rocket ","date":"2019-10-01","objectID":"/emoji-support/:5:8","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Hotel icon code icon code 🛎️ bellhop_bell ","date":"2019-10-01","objectID":"/emoji-support/:5:9","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Time icon code icon code ⌛ hourglass ⏳ hourglass_flowing_sand ⌚ watch ⏰ alarm_clock ⏱️ stopwatch ⏲️ timer_clock 🕰️ mantelpiece_clock 🕛 clock12 🕧 clock1230 🕐 clock1 🕜 clock130 🕑 clock2 🕝 clock230 🕒 clock3 🕞 clock330 🕓 clock4 🕟 clock430 🕔 clock5 🕠 clock530 🕕 clock6 🕡 clock630 🕖 clock7 🕢 clock730 🕗 clock8 🕣 clock830 🕘 clock9 🕤 clock930 🕙 clock10 🕥 clock1030 🕚 clock11 🕦 clock1130 ","date":"2019-10-01","objectID":"/emoji-support/:5:10","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Sky \u0026 Weather icon code icon code 🌑 new_moon 🌒 waxing_crescent_moon 🌓 first_quarter_moon 🌔 moon waxing_gibbous_moon 🌕 full_moon 🌖 waning_gibbous_moon 🌗 last_quarter_moon 🌘 waning_crescent_moon 🌙 crescent_moon 🌚 new_moon_with_face 🌛 first_quarter_moon_with_face 🌜 last_quarter_moon_with_face 🌡️ thermometer ☀️ sunny 🌝 full_moon_with_face 🌞 sun_with_face ⭐ star 🌟 star2 🌠 stars 🌌 milky_way ☁️ cloud ⛅ partly_sunny ⛈ cloud_with_lightning_and_rain 🌤 sun_behind_small_cloud 🌥 sun_behind_large_cloud 🌦 sun_behind_rain_cloud 🌧 cloud_with_rain 🌨 cloud_with_snow 🌩 cloud_with_lightning 🌪️ tornado 🌫️ fog 🌬 wind_face 🌀 cyclone 🌈 rainbow 🌂 closed_umbrella ☂️ open_umbrella ☂️ umbrella ⛱️ parasol_on_ground ⚡ zap ❄️ snowflake ☃️ snowman_with_snow ☃️ snowman ☄️ comet 🔥 fire 💧 droplet 🌊 ocean ","date":"2019-10-01","objectID":"/emoji-support/:5:11","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Activities ","date":"2019-10-01","objectID":"/emoji-support/:6:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Event icon code icon code 🎃 jack_o_lantern 🎄 christmas_tree 🎆 fireworks 🎇 sparkler ✨ sparkles 🎈 balloon 🎉 tada 🎊 confetti_ball 🎋 tanabata_tree 🎍 bamboo 🎎 dolls 🎏 flags 🎐 wind_chime 🎑 rice_scene 🎀 ribbon 🎁 gift 🎗️ reminder_ribbon 🎟 tickets 🎫 ticket ","date":"2019-10-01","objectID":"/emoji-support/:6:1","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Award Medal icon code icon code 🎖️ medal_military 🏆 trophy 🏅 medal_sports 🥇 1st_place_medal 🥈 2nd_place_medal 🥉 3rd_place_medal ","date":"2019-10-01","objectID":"/emoji-support/:6:2","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Sport icon code icon code ⚽ soccer ⚾ baseball 🏀 basketball 🏐 volleyball 🏈 football 🏉 rugby_football 🎾 tennis 🎳 bowling 🦗 cricket 🏑 field_hockey 🏒 ice_hockey 🏓 ping_pong 🏸 badminton 🥊 boxing_glove 🥋 martial_arts_uniform 🥅 goal_net ⛳ golf ⛸️ ice_skate 🎣 fishing_pole_and_fish 🎽 running_shirt_with_sash 🎿 ski ","date":"2019-10-01","objectID":"/emoji-support/:6:3","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Game icon code icon code 🎯 dart 🎱 8ball 🔮 crystal_ball 🎮 video_game 🕹️ joystick 🎰 slot_machine 🎲 game_die ♠️ spades ♥️ hearts ♦️ diamonds ♣️ clubs 🃏 black_joker 🀄 mahjong 🎴 flower_playing_cards ","date":"2019-10-01","objectID":"/emoji-support/:6:4","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Arts \u0026 Crafts icon code icon code 🎭 performing_arts 🖼 framed_picture 🎨 art ","date":"2019-10-01","objectID":"/emoji-support/:6:5","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Objects ","date":"2019-10-01","objectID":"/emoji-support/:7:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Clothing icon code icon code 👓 eyeglasses 🕶️ dark_sunglasses 👔 necktie 👕 shirt tshirt 👖 jeans 👗 dress 👘 kimono 👙 bikini 👚 womans_clothes 👛 purse 👜 handbag 👝 pouch 🛍️ shopping 🎒 school_satchel 👞 mans_shoe shoe 👟 athletic_shoe 👠 high_heel 👡 sandal 👢 boot 👑 crown 👒 womans_hat 🎩 tophat 🎓 mortar_board ⛑️ rescue_worker_helmet 📿 prayer_beads 💄 lipstick 💍 ring 💎 gem ","date":"2019-10-01","objectID":"/emoji-support/:7:1","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Sound icon code icon code 🔇 mute 🔈 speaker 🔉 sound 🔊 loud_sound 📢 loudspeaker 📣 mega 📯 postal_horn 🔔 bell 🔕 no_bell ","date":"2019-10-01","objectID":"/emoji-support/:7:2","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Music icon code icon code 🎼 musical_score 🎵 musical_note 🎶 notes 🎙️ studio_microphone 🎚️ level_slider 🎛️ control_knobs 🎤 microphone 🎧 headphones 📻 radio ","date":"2019-10-01","objectID":"/emoji-support/:7:3","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Musical Instrument icon code icon code 🎷 saxophone 🎸 guitar 🎹 musical_keyboard 🎺 trumpet 🎻 violin 🥁 drum ","date":"2019-10-01","objectID":"/emoji-support/:7:4","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Phone icon code icon code 📱 iphone 📲 calling ☎️ phone telephone 📞 telephone_receiver 📟 pager 📠 fax ","date":"2019-10-01","objectID":"/emoji-support/:7:5","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Computer icon code icon code 🔋 battery 🔌 electric_plug 💻 computer 🖥️ desktop_computer 🖨️ printer ⌨️ keyboard 🖱 computer_mouse 🖲️ trackball 💽 minidisc 💾 floppy_disk 💿 cd 📀 dvd ","date":"2019-10-01","objectID":"/emoji-support/:7:6","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Light \u0026 Video icon code icon code 🎥 movie_camera 🎞️ film_strip 📽️ film_projector 🎬 clapper 📺 tv 📷 camera 📸 camera_flash 📹 video_camera 📼 vhs 🔍 mag 🔎 mag_right 🕯️ candle 💡 bulb 🔦 flashlight 🏮 izakaya_lantern lantern ","date":"2019-10-01","objectID":"/emoji-support/:7:7","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Book Paper icon code icon code 📔 notebook_with_decorative_cover 📕 closed_book 📖 book open_book 📗 green_book 📘 blue_book 📙 orange_book 📚 books 📓 notebook 📒 ledger 📃 page_with_curl 📜 scroll 📄 page_facing_up 📰 newspaper 🗞️ newspaper_roll 📑 bookmark_tabs 🔖 bookmark 🏷️ label ","date":"2019-10-01","objectID":"/emoji-support/:7:8","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Money icon code icon code 💰 moneybag 💴 yen 💵 dollar 💶 euro 💷 pound 💸 money_with_wings 💳 credit_card 💹 chart ","date":"2019-10-01","objectID":"/emoji-support/:7:9","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Mail icon code icon code ✉️ email envelope 📧 📧 📨 incoming_envelope 📩 envelope_with_arrow 📤 outbox_tray 📥 inbox_tray 📦 package 📫 mailbox 📪 mailbox_closed 📬 mailbox_with_mail 📭 mailbox_with_no_mail 📮 postbox 🗳 ballot_box ","date":"2019-10-01","objectID":"/emoji-support/:7:10","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Writing icon code icon code ✏️ pencil2 ✒️ black_nib 🖋 fountain_pen 🖊 pen 🖌 paintbrush 🖍 crayon 📝 memo pencil ","date":"2019-10-01","objectID":"/emoji-support/:7:11","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Office icon code icon code 💼 briefcase 📁 file_folder 📂 open_file_folder 🗂️ card_index_dividers 📅 date 📆 calendar 🗒 spiral_notepad 🗓 spiral_calendar 📇 card_index 📈 chart_with_upwards_trend 📉 chart_with_downwards_trend 📊 bar_chart 📋 clipboard 📌 pushpin 📍 round_pushpin 📎 paperclip 🖇 paperclips 📏 straight_ruler 📐 triangular_ruler ✂️ scissors 🗃️ card_file_box 🗄️ file_cabinet 🗑️ wastebasket ","date":"2019-10-01","objectID":"/emoji-support/:7:12","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Lock icon code icon code 🔒 lock 🔓 unlock 🔏 lock_with_ink_pen 🔐 closed_lock_with_key 🔑 key 🗝️ old_key ","date":"2019-10-01","objectID":"/emoji-support/:7:13","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Tool icon code icon code 🔨 hammer ⛏️ pick ⚒️ hammer_and_pick 🛠️ hammer_and_wrench 🗡 dagger ⚔️ crossed_swords 🔫 gun 🏹 bow_and_arrow 🛡️ shield 🔧 wrench 🔩 nut_and_bolt ⚙️ gear 🗜 clamp ⚖ balance_scale 🔗 link ⛓️ chains ","date":"2019-10-01","objectID":"/emoji-support/:7:14","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Science icon code icon code ⚗️ alembic 🔬 microscope 🔭 telescope 🛰️ satellite ","date":"2019-10-01","objectID":"/emoji-support/:7:15","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Medical icon code icon code 💉 syringe 💊 pill ","date":"2019-10-01","objectID":"/emoji-support/:7:16","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Household icon code icon code 🚪 door 🛏️ bed 🛋️ couch_and_lamp 🚽 toilet 🚿 shower 🛁 bathtub 🛒 shopping_cart ","date":"2019-10-01","objectID":"/emoji-support/:7:17","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Other Object icon code icon code 🚬 smoking ⚰️ coffin ⚱️ funeral_urn 🗿 moyai ","date":"2019-10-01","objectID":"/emoji-support/:7:18","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Symbols ","date":"2019-10-01","objectID":"/emoji-support/:8:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Transport Sign icon code icon code 🏧 atm 🚮 put_litter_in_its_place 🚰 potable_water ♿ wheelchair 🚹 mens 🚺 womens 🚻 restroom 🚼 baby_symbol 🚾 wc 🛂 passport_control 🛃 customs 🛄 baggage_claim 🛅 left_luggage ","date":"2019-10-01","objectID":"/emoji-support/:8:1","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Warning icon code icon code ⚠️ warning 🚸 children_crossing ⛔ no_entry 🚫 no_entry_sign 🚳 no_bicycles 🚭 no_smoking 🚯 do_not_litter 🚱 🚱 🚷 no_pedestrians 📵 no_mobile_phones 🔞 underage ☢ radioactive ☣ biohazard ","date":"2019-10-01","objectID":"/emoji-support/:8:2","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Arrow icon code icon code ⬆️ arrow_up ↗️ arrow_upper_right ➡️ arrow_right ↘️ arrow_lower_right ⬇️ arrow_down ↙️ arrow_lower_left ⬅️ arrow_left ↖️ arrow_upper_left ↕️ arrow_up_down ↔️ left_right_arrow ↩️ leftwards_arrow_with_hook ↪️ arrow_right_hook ⤴️ arrow_heading_up ⤵️ arrow_heading_down 🔃 arrows_clockwise 🔄 arrows_counterclockwise 🔙 back 🔚 end 🔛 on 🔜 soon 🔝 top ","date":"2019-10-01","objectID":"/emoji-support/:8:3","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Religion icon code icon code 🛐 place_of_worship ⚛️ atom_symbol 🕉 om ✡️ star_of_david ☸️ wheel_of_dharma ☯️ yin_yang ✝️ latin_cross ☦️ orthodox_cross ☪️ star_and_crescent ☮️ peace_symbol 🕎 menorah 🔯 six_pointed_star ","date":"2019-10-01","objectID":"/emoji-support/:8:4","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Zodiac icon code icon code ♈ aries ♉ taurus ♊ gemini ♋ cancer ♌ leo ♍ virgo ♎ libra ♏ scorpius ♐ sagittarius ♑ capricorn ♒ aquarius ♓ pisces ⛎ ophiuchus ","date":"2019-10-01","objectID":"/emoji-support/:8:5","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Av Symbol icon code icon code 🔀 twisted_rightwards_arrows 🔁 repeat 🔂 repeat_one ▶️ arrow_forward ⏩ fast_forward ⏭ next_track_button ⏯ play_or_pause_button ◀️ arrow_backward ⏪ rewind ⏮️ previous_track_button 🔼 arrow_up_small ⏫ arrow_double_up 🔽 arrow_down_small ⏬ arrow_double_down ⏸ pause_button ⏹ stop_button ⏺ record_button 🎦 cinema 🔅 low_brightness 🔆 high_brightness 📶 signal_strength 📳 vibration_mode 📴 mobile_phone_off ","date":"2019-10-01","objectID":"/emoji-support/:8:6","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Math icon code icon code ✖️ heavy_multiplication_x ➕ heavy_plus_sign ➖ heavy_minus_sign ➗ heavy_division_sign ","date":"2019-10-01","objectID":"/emoji-support/:8:7","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Punctuation icon code icon code ‼️ bangbang ⁉️ interrobang ❓ question ❔ grey_question ❕ grey_exclamation ❗ exclamation heavy_exclamation_mark 〰️ wavy_dash ","date":"2019-10-01","objectID":"/emoji-support/:8:8","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Currency icon code icon code 💱 currency_exchange 💲 heavy_dollar_sign ","date":"2019-10-01","objectID":"/emoji-support/:8:9","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Keycap icon code icon code #️⃣ hash *️⃣ asterisk 0️⃣ zero 1️⃣ one 2️⃣ two 3️⃣ three 4️⃣ four 5️⃣ five 6️⃣ six 7️⃣ seven 8️⃣ eight 9️⃣ nine 🔟 keycap_ten ","date":"2019-10-01","objectID":"/emoji-support/:8:10","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Alphabet icon code icon code 🔠 capital_abcd 🔡 abcd 🔢 1234 🔣 symbols 🔤 abc 🅰️ a 🆎 ab 🅱️ b 🆑 cl 🆒 cool 🆓 free ℹ️ information_source 🆔 id ⓜ️ m 🆕 new 🆖 ng 🅾️ o2 🆗 ok 🅿️ parking 🆘 sos 🆙 up 🆚 vs 🈁 koko 🈂️ sa 🈷️ u6708 🈶 u6709 🈯 u6307 🉐 ideograph_advantage 🈹 u5272 🈚 u7121 🈲 u7981 🉑 accept 🈸 u7533 🈴 u5408 🈳 u7a7a ㊗️ congratulations ㊙️ secret 🈺 u55b6 🈵 u6e80 ","date":"2019-10-01","objectID":"/emoji-support/:8:11","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Geometric icon code icon code 🔴 red_circle 🔵 large_blue_circle ⚫ black_circle ⚪ white_circle ⬛ black_large_square ⬜ white_large_square ◼️ black_medium_square ◻️ white_medium_square ◾ black_medium_small_square ◽ white_medium_small_square ▪️ black_small_square ▫️ white_small_square 🔶 large_orange_diamond 🔷 large_blue_diamond 🔸 small_orange_diamond 🔹 small_blue_diamond 🔺 small_red_triangle 🔻 small_red_triangle_down 💠 diamond_shape_with_a_dot_inside 🔘 radio_button 🔳 white_square_button 🔲 black_square_button ","date":"2019-10-01","objectID":"/emoji-support/:8:12","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Other Symbol icon code icon code ♻️ recycle ⚜️ fleur_de_lis 🔱 trident 📛 name_badge 🔰 beginner ⭕ o ✅ white_check_mark ☑️ ballot_box_with_check ✔️ heavy_check_mark ❌ x ❎ negative_squared_cross_mark ➰ curly_loop ➿ loop 〽️ part_alternation_mark ✳️ eight_spoked_asterisk ✴️ eight_pointed_black_star ❇️ sparkle ©️ copyright ®️ registered ™️ tm ","date":"2019-10-01","objectID":"/emoji-support/:8:13","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Flags ","date":"2019-10-01","objectID":"/emoji-support/:9:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Common Flags icon code icon code 🏁 checkered_flag 🚩 triangular_flag_on_post 🎌 crossed_flags 🏴 black_flag 🏳 white_flag 🏳️‍🌈 rainbow_flag ","date":"2019-10-01","objectID":"/emoji-support/:9:1","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Country and Region Flags icon code icon code 🇦🇩 andorra 🇦🇪 united_arab_emirates 🇦🇫 afghanistan 🇦🇬 antigua_barbuda 🇦🇮 anguilla 🇦🇱 albania 🇦🇲 armenia 🇦🇴 angola 🇦🇶 antarctica 🇦🇷 argentina 🇦🇸 american_samoa 🇦🇹 austria 🇦🇺 australia 🇦🇼 aruba 🇦🇽 aland_islands 🇦🇿 azerbaijan 🇧🇦 bosnia_herzegovina 🇧🇧 barbados 🇧🇩 bangladesh 🇧🇪 belgium 🇧🇫 burkina_faso 🇧🇬 bulgaria 🇧🇭 bahrain 🇧🇮 burundi 🇧🇯 benin 🇧🇱 st_barthelemy 🇧🇲 bermuda 🇧🇳 brunei 🇧🇴 bolivia 🇧🇶 caribbean_netherlands 🇧🇷 brazil 🇧🇸 bahamas 🇧🇹 bhutan 🇧🇼 botswana 🇧🇾 belarus 🇧🇿 belize 🇨🇦 canada 🇨🇨 cocos_islands 🇨🇩 congo_kinshasa 🇨🇫 central_african_republic 🇨🇬 congo_brazzaville 🇨🇭 switzerland 🇨🇮 cote_divoire 🇨🇰 cook_islands 🇨🇱 chile 🇨🇲 cameroon 🇨🇳 cn 🇨🇴 colombia 🇨🇷 costa_rica 🇨🇺 cuba 🇨🇻 cape_verde 🇨🇼 curacao 🇨🇽 christmas_island 🇨🇾 cyprus 🇨🇿 czech_republic 🇩🇪 de 🇩🇯 djibouti 🇩🇰 denmark 🇩🇲 dominica 🇩🇴 dominican_republic 🇩🇿 algeria 🇪🇨 ecuador 🇪🇪 estonia 🇪🇬 egypt 🇪🇭 western_sahara 🇪🇷 eritrea 🇪🇸 es 🇪🇹 ethiopia 🇪🇺 eu european_union 🇫🇮 finland 🇫🇯 fiji 🇫🇰 falkland_islands 🇫🇲 micronesia 🇫🇴 faroe_islands 🇫🇷 fr 🇬🇦 gabon 🇬🇧 gb uk 🇬🇩 grenada 🇬🇪 georgia 🇬🇫 french_guiana 🇬🇬 guernsey 🇬🇭 ghana 🇬🇮 gibraltar 🇬🇱 greenland 🇬🇲 gambia 🇬🇳 guinea 🇬🇵 guadeloupe 🇬🇶 equatorial_guinea 🇬🇷 greece 🇬🇸 south_georgia_south_sandwich_islands 🇬🇹 guatemala 🇬🇺 guam 🇬🇼 guinea_bissau 🇬🇾 guyana 🇭🇰 hong_kong 🇭🇳 honduras 🇭🇷 croatia 🇭🇹 haiti 🇭🇺 hungary 🇮🇨 canary_islands 🇮🇩 indonesia 🇮🇪 ireland 🇮🇱 israel 🇮🇲 isle_of_man 🇮🇳 india 🇮🇴 british_indian_ocean_territory 🇮🇶 iraq 🇮🇷 iran 🇮🇸 iceland 🇮🇹 it 🇯🇪 jersey 🇯🇲 jamaica 🇯🇴 jordan 🇯🇵 jp 🇰🇪 kenya 🇰🇬 kyrgyzstan 🇰🇭 cambodia 🇰🇮 kiribati 🇰🇲 comoros 🇰🇳 st_kitts_nevis 🇰🇵 north_korea 🇰🇷 kr 🇰🇼 kuwait 🇰🇾 cayman_islands 🇰🇿 kazakhstan 🇱🇦 laos 🇱🇧 lebanon 🇱🇨 st_lucia 🇱🇮 liechtenstein 🇱🇰 sri_lanka 🇱🇷 liberia 🇱🇸 lesotho 🇱🇹 lithuania 🇱🇺 luxembourg 🇱🇻 latvia 🇱🇾 libya 🇲🇦 morocco 🇲🇨 monaco 🇲🇩 moldova 🇲🇪 montenegro 🇲🇬 madagascar 🇲🇭 marshall_islands 🇲🇰 macedonia 🇲🇱 mali 🇲🇲 myanmar 🇲🇳 mongolia 🇲🇴 macau 🇲🇵 northern_mariana_islands 🇲🇶 martinique 🇲🇷 mauritania 🇲🇸 montserrat 🇲🇹 malta 🇲🇺 mauritius 🇲🇻 maldives 🇲🇼 malawi 🇲🇽 mexico 🇲🇾 malaysia 🇲🇿 mozambique 🇳🇦 namibia 🇳🇨 new_caledonia 🇳🇪 niger 🇳🇫 norfolk_island 🇳🇬 nigeria 🇳🇮 nicaragua 🇳🇱 netherlands 🇳🇴 norway 🇳🇵 nepal 🇳🇷 nauru 🇳🇺 niue 🇳🇿 new_zealand 🇴🇲 oman 🇵🇦 panama 🇵🇪 peru 🇵🇫 french_polynesia 🇵🇬 papua_new_guinea 🇵🇭 philippines 🇵🇰 pakistan 🇵🇱 poland 🇵🇲 st_pierre_miquelon 🇵🇳 pitcairn_islands 🇵🇷 puerto_rico 🇵🇸 palestinian_territories 🇵🇹 portugal 🇵🇼 palau 🇵🇾 paraguay 🇶🇦 qatar 🇷🇪 reunion 🇷🇴 romania 🇷🇸 serbia 🇷🇺 ru 🇷🇼 rwanda 🇸🇦 saudi_arabia 🇸🇧 solomon_islands 🇸🇨 seychelles 🇸🇩 sudan 🇸🇪 sweden 🇸🇬 singapore 🇸🇭 st_helena 🇸🇮 slovenia 🇸🇰 slovakia 🇸🇱 sierra_leone 🇸🇲 san_marino 🇸🇳 senegal 🇸🇴 somalia 🇸🇷 suriname 🇸🇸 south_sudan 🇸🇹 sao_tome_principe 🇸🇻 el_salvador 🇸🇽 sint_maarten 🇸🇾 syria 🇸🇿 swaziland 🇹🇨 turks_caicos_islands 🇹🇩 chad 🇹🇫 french_southern_territories 🇹🇬 togo 🇹🇭 thailand 🇹🇯 tajikistan 🇹🇰 tokelau 🇹🇱 timor_leste 🇹🇲 turkmenistan 🇹🇳 tunisia 🇹🇴 tonga 🇹🇷 tr 🇹🇹 trinidad_tobago 🇹🇻 tuvalu 🇹🇼 taiwan 🇹🇿 tanzania 🇺🇦 ukraine 🇺🇬 uganda 🇺🇸 us 🇺🇾 uruguay 🇺🇿 uzbekistan 🇻🇦 vatican_city 🇻🇨 st_vincent_grenadines 🇻🇪 venezuela 🇻🇬 british_virgin_islands 🇻🇮 us_virgin_islands 🇻🇳 vietnam 🇻🇺 vanuatu 🇼🇫 wallis_futuna 🇼🇸 samoa 🇽🇰 kosovo 🇾🇪 yemen 🇾🇹 mayotte 🇿🇦 south_africa 🇿🇲 zambia 🇿🇼 zimbabwe ","date":"2019-10-01","objectID":"/emoji-support/:9:2","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Family"],"content":"Notre premiere date speciale Le premier mai 2020, we saved the date. ","date":"2020-06-07","objectID":"/notre-nouveau-soleil/:1:0","tags":["family"],"title":"Notre Nouveau Soleil","uri":"/notre-nouveau-soleil/"},{"categories":["Family"],"content":"Guide Ma Maternité par CPAM Le guide « ma maternité » qui vous donne des renseignements administratifs et des conseils en santé est disponible. This browser does not support PDFs. Please download the PDF to view it: Download PDF. ","date":"2020-06-07","objectID":"/notre-nouveau-soleil/:2:0","tags":["family"],"title":"Notre Nouveau Soleil","uri":"/notre-nouveau-soleil/"},{"categories":["Tools"],"content":"This features a non-exhaustive list of my Essential Softwares for PC. ","date":"2020-05-10","objectID":"/essential-softwares/:0:0","tags":null,"title":"Essential Softwares","uri":"/essential-softwares/"},{"categories":["Tools"],"content":"Common ","date":"2020-05-10","objectID":"/essential-softwares/:1:0","tags":null,"title":"Essential Softwares","uri":"/essential-softwares/"},{"categories":["Tools"],"content":"Coding Visual Studio Code: general-purpose IDE for Linux, Windows and MacOS: choco install -y vscode ","date":"2020-05-10","objectID":"/essential-softwares/:1:1","tags":null,"title":"Essential Softwares","uri":"/essential-softwares/"},{"categories":["Tools"],"content":"Languages Learning BBC Learning English: beautiful English tutorials at beginner and intermediate level available for Web, iOS, Android. Dictionaries Lingoes: a dictionary reader available for Windows only. GoldenDict: another dictionary reader available for Windows, Linux or MacOS. Flashcards Anki: powerful, intelligent flash cards available for Windows, Linux, MacOS, iOS (non-free), Android. Others DeepL Translator: AI Assistance for Language available for Windows, MacOS, Linux. DeepL Linguee: translation database from DeepL available for Web, iOS, Android. ","date":"2020-05-10","objectID":"/essential-softwares/:1:2","tags":null,"title":"Essential Softwares","uri":"/essential-softwares/"},{"categories":["Tools"],"content":"Utilities ","date":"2020-05-10","objectID":"/essential-softwares/:2:0","tags":null,"title":"Essential Softwares","uri":"/essential-softwares/"},{"categories":["Tools"],"content":"Screen capturing ShareX: free and open-source available for Windows Greenshot: free and open-source for Windows and 1.99$ for MacOS Faststone: powerful, not-free, lightweight, available for Windows ","date":"2020-05-10","objectID":"/essential-softwares/:2:1","tags":null,"title":"Essential Softwares","uri":"/essential-softwares/"},{"categories":["Tools"],"content":"Windows 10 ","date":"2020-05-10","objectID":"/essential-softwares/:3:0","tags":null,"title":"Essential Softwares","uri":"/essential-softwares/"},{"categories":["Tools"],"content":"General tools Chocolatey: command-line-based package manager for Windows # Open cmd or powershell in Administrative mode Get-ExecutionPolicy # If it returns Restricted, then run Set-ExecutionPolicy AllSigned # or Set-ExecutionPolicy Bypass -Scope Process # Install choco Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) # check choco 7zip: compression and decompression tool choco install -y 7zip LockHunter: find and kill processes occupying certain files. Unlocker is not longer supported. choco install -y lockhunter ","date":"2020-05-10","objectID":"/essential-softwares/:3:1","tags":null,"title":"Essential Softwares","uri":"/essential-softwares/"},{"categories":["Tools"],"content":"Remote working TeamViewer: connect to remote computers choco install -y teamviewer ","date":"2020-05-10","objectID":"/essential-softwares/:3:2","tags":null,"title":"Essential Softwares","uri":"/essential-softwares/"},{"categories":["Tools"],"content":"Browsers Google Chrome choco install -y googlechrome ","date":"2020-05-10","objectID":"/essential-softwares/:3:3","tags":null,"title":"Essential Softwares","uri":"/essential-softwares/"},{"categories":["Tools"],"content":"Security Brave: Chromium-based browser with novel mechanism for ad filtering and tracker blocking choco install -y brave Tor: Firefox-based browser with emphasis on privacy choco install -y tor-browser Windscribe VPN: Canadian-based VPN service with 10GB/month for free users choco install -y windscribe Seed4me VPN: lightweight VPN but not free ","date":"2020-05-10","objectID":"/essential-softwares/:3:4","tags":null,"title":"Essential Softwares","uri":"/essential-softwares/"},{"categories":["Tools"],"content":"Linux ","date":"2020-05-10","objectID":"/essential-softwares/:4:0","tags":null,"title":"Essential Softwares","uri":"/essential-softwares/"},{"categories":["Tools"],"content":"Terminals terminator + oh-my-zsh or all-in-one instruction: enhanced terminal and z shell vimrc: ultimate vim configuration ","date":"2020-05-10","objectID":"/essential-softwares/:4:1","tags":null,"title":"Essential Softwares","uri":"/essential-softwares/"},{"categories":["Tools"],"content":"Shell tools fasd silversearcher-ag jq: C-based JSON parser in shell. An example: cat package.json | jq . -C | less -R fx: JS-based JSON parser in shell tldr: JS-based simplified and community-driven man pages ","date":"2020-05-10","objectID":"/essential-softwares/:4:2","tags":null,"title":"Essential Softwares","uri":"/essential-softwares/"},{"categories":["Web Development"],"content":"For personal blogs Hugo Jekyll ","date":"2020-05-09","objectID":"/static-web-engines/:1:0","tags":null,"title":"Static Web Engines","uri":"/static-web-engines/"},{"categories":["Web Development"],"content":"For documentations Docusaurus: open-sourced, good support by Facebook, good UI for navigation Readthedocs: ideal for books, like this Python book Gitbook: appropriate for team documentations Bookstack: idem, open-sourced and self-hosting Docsify: lightweight team documentation Sphinx: API docs with simplified themes, i.e. Alabaster ","date":"2020-05-09","objectID":"/static-web-engines/:2:0","tags":null,"title":"Static Web Engines","uri":"/static-web-engines/"},{"categories":["Web Development"],"content":"For APIs Swagger [Doxygen]: for example, DBus [Redoc]: for example, Docker Postman ","date":"2020-05-09","objectID":"/static-web-engines/:3:0","tags":null,"title":"Static Web Engines","uri":"/static-web-engines/"},{"categories":["Development"],"content":"References Bash reference manual Cheat sheet Google style convention ","date":"2020-05-05","objectID":"/shell-cheat-sheet/:1:0","tags":["bash"],"title":"Shell Cheat Sheets","uri":"/shell-cheat-sheet/"},{"categories":["Development"],"content":"Bourne shell Bourne shell is sensitive to round brackets (). For example: # /bin/sh (echo \"1.2.3\" | grep -Eq ^[0-9]+\\.[0-9]+\\.[0-9]+$ \u0026\u0026 VAL=0) || VAL=1; echo $VAL; # '' echo \"1.2.3\" | grep -Eq ^[0-9]+\\.[0-9]+\\.[0-9]+$ \u0026\u0026 VAL=0 || VAL=1; echo $VAL; # 0 # /bin/bash (echo \"1.2.3\" | grep -Eq ^[0-9]+\\.[0-9]+\\.[0-9]+$ \u0026\u0026 VAL=\"OK\") || VAL=\"NOK\" echo $VAL # OK Double quotes in Bourne shell make strings un-loopable: #!/bin/bash # Read a string with spaces using for loop for value in I like programming do echo $value; done val=\"I like programming\"; for value in $val do echo $value; done # I # like # programming for value in \"$val\" do echo $value; done # I like programming Attention, IFS can change the default behavior, for example, IFS=\"\" will not split strings by space. The output value will be I like programming. ","date":"2020-05-05","objectID":"/shell-cheat-sheet/:2:0","tags":["bash"],"title":"Shell Cheat Sheets","uri":"/shell-cheat-sheet/"},{"categories":["Development"],"content":"Shell scripting Exit when any commands return a non-zero exit code: # exit when any command fails set -e Further advanced exit strategies are available here ","date":"2020-05-05","objectID":"/shell-cheat-sheet/:3:0","tags":["bash"],"title":"Shell Cheat Sheets","uri":"/shell-cheat-sheet/"},{"categories":["Development"],"content":"Troubleshooting ","date":"2020-05-05","objectID":"/shell-cheat-sheet/:4:0","tags":["bash"],"title":"Shell Cheat Sheets","uri":"/shell-cheat-sheet/"},{"categories":["Development"],"content":"Return values in functions Bash can’t pass around data structures as return values in functions. A return value must be a numeric exit status between 0-255. It’s not recommended to return structured data like below: # Don't get_users() { user=(John Dave Amy) echo \"${user[@]}\" } give_gifts() { local users=$(get_users) for user in \"${users[@]}\" do echo \"Give ${user}a gift\" done } With Bash version 4.3 and above, we can make use of a nameref to pass return data. # Do get_userz() { local -n arr=$1 # use nameref for indirection arr=(John Dave Amy) } give_gifts() { local userz get_userz userz for user in \"${users[@]}\" do echo \"Give ${user}a gift\" done } ","date":"2020-05-05","objectID":"/shell-cheat-sheet/:4:1","tags":["bash"],"title":"Shell Cheat Sheets","uri":"/shell-cheat-sheet/"},{"categories":["Development"],"content":"gitlab-ci.yml YAML files used in GitLab CI does not support colon (:) in commands, i.e. curl -H \"access-token: test\". Use with care. ","date":"2020-05-05","objectID":"/shell-cheat-sheet/:4:2","tags":["bash"],"title":"Shell Cheat Sheets","uri":"/shell-cheat-sheet/"},{"categories":["Development","Git"],"content":"GitLab ","date":"2020-05-01","objectID":"/git-cheat-sheet/:1:0","tags":["git"],"title":"Git Cheat Sheets","uri":"/git-cheat-sheet/"},{"categories":["Development","Git"],"content":"Gitlab CI-CD ","date":"2020-05-01","objectID":"/git-cheat-sheet/:1:1","tags":["git"],"title":"Git Cheat Sheets","uri":"/git-cheat-sheet/"},{"categories":["Development","Git"],"content":"Reference Pay attention that the correct file for gitlab ci-cd pipeline .gitlab-ci.yml ends with .yml, not .yaml. ","date":"2020-05-01","objectID":"/git-cheat-sheet/:1:2","tags":["git"],"title":"Git Cheat Sheets","uri":"/git-cheat-sheet/"},{"categories":["Development","Git"],"content":"Choose which executor for gitlab runner ","date":"2020-05-01","objectID":"/git-cheat-sheet/:1:3","tags":["git"],"title":"Git Cheat Sheets","uri":"/git-cheat-sheet/"},{"categories":["Development","Git"],"content":"Increase concurrent jobs Jobs are executed by Runners. Multiple jobs in the same stage are executed in parallel, if there are enough concurrent runners. The limit of concurrent jobs are tunable in config.toml. ","date":"2020-05-01","objectID":"/git-cheat-sheet/:1:4","tags":["git"],"title":"Git Cheat Sheets","uri":"/git-cheat-sheet/"},{"categories":["Development","Git"],"content":"Job image vs docker executor In the definition of jobs, the image keyword is the name of the Docker image the Docker executor will run to perform the CI tasks. Check if other executors like ssh can consume the image keyword ","date":"2020-05-01","objectID":"/git-cheat-sheet/:1:5","tags":["git"],"title":"Git Cheat Sheets","uri":"/git-cheat-sheet/"},{"categories":["Development","Git"],"content":"Services in jobs The services keyword defines just another Docker image that is run during your job and is linked to the Docker image that the image keyword defines. This allows you to access the service image during build time. This feature is designed to provide network accessible services. A database is the simplest example of such a service. Do not use services as tools for the jobs. ","date":"2020-05-01","objectID":"/git-cheat-sheet/:1:6","tags":["git"],"title":"Git Cheat Sheets","uri":"/git-cheat-sheet/"},{"categories":["Development","Git"],"content":"Semantic versioning Semantic release allows automatic versioning and package publishing. How does it work? Follow Angular commit message convention during development phase Host code in a git repository Create a working CI pipeline, i.e. add a working .gitlab-ci.yml file to project Install git 2.7.1 minimum, node.js 10.18 minimum and semantic-release in CI environment. These tools can be installed in a job of Jenkins runner, or be ready with a Jenkins runner based of node.js image Configure CI service to expose the access token in the environment variable and run semantic-release during the versioning job Add configuration file include branches include plugins (depending on CI environment) Trigger the CI pipeline ","date":"2020-05-01","objectID":"/git-cheat-sheet/:1:7","tags":["git"],"title":"Git Cheat Sheets","uri":"/git-cheat-sheet/"},{"categories":["Development","Git"],"content":"Debugging in gitlab runners Run gitlab-runner in debug mode: gitlab-runner --debug run Use Interactive Web Terminals Support for Docker executor is underway Gitlab has numerous built-in environment variables for the pipeline runtime. Take advantage of them. ","date":"2020-05-01","objectID":"/git-cheat-sheet/:1:8","tags":["git"],"title":"Git Cheat Sheets","uri":"/git-cheat-sheet/"},{"categories":["Development","Git"],"content":"Troubleshooting Nested reference of variables is not working in gitlab-ci.yml. $ cat .gitlab-ci.yml variables: PROJECT_NAME: $CI_PROJECT_NAME # default CI variable of gitlab job-sample: stage: stage-sample image: docker variables: BUILD_PROJECT_NAME: $PROJECT_NAME # Don't. $CI_PROJECT_NAME will not be evaluated here services: - docker:dind script: - echo $BUILD_PROJECT_NAME # Don't. Output result: $PROJECT_NAME - echo $PROJECT_NAME # Do. Output result: git-cheat-sheet-and-tricks ","date":"2020-05-01","objectID":"/git-cheat-sheet/:1:9","tags":["git"],"title":"Git Cheat Sheets","uri":"/git-cheat-sheet/"},{"categories":["Development","Git"],"content":"Mirroring using deploy keys Git service providers have a mirroring functionality, allowing a repository either to push to or pull from a mirror. However, in case mirroring is impossible due to software version or a network policy, a cron job or a CI pipeline with runners like Jenkins can be useful. In order to register deploy keys in the target mirror, several steps are to follow: Firstly generate your SSH keys locally: ssh-keygen -t rsa -C \"your.email@address.com\" -b 4096 Assign public key id_rsa.pub (from ssh-rsa to end of your email) to the target git project, option Create a new deploy key in Project Settings. Ensure write permission is selected. # Downloads and installs xclip. If you don't have `apt-get`, you might need to use another installer (like `yum`) sudo apt-get install clip # Copies the contents of the id_rsa.pub file to your clipboard xclip -sel clip \u003c ~/.ssh/id_rsa.pub Add the private SSH_KEY to the environment variable of your repository setting and let the CI/CD pipeline or your cron job does its work :). apt update \u0026\u0026 apt-get install -y openssh mkdir ~/.ssh eval `ssh-agent -s` # start ssh-agent before adding key cat $SSH_KEY | ssh-add - # adding ssh key without using sensitive round brackets echo -e \"Host *\\n\\tStrictHostKeyChecking no\\n\\n\" \u003e ~/.ssh/config # no strict key checking git config --global user.name \"Your Name\" git config --global user.email \"your.email@address.com\" git checkout master git pull --unshallow origin master # pull old tree deeply to ensure we have all new changes git remote add remote git@github.com:new/repo.git || true git push -u remote master ","date":"2020-05-01","objectID":"/git-cheat-sheet/:1:10","tags":["git"],"title":"Git Cheat Sheets","uri":"/git-cheat-sheet/"},{"categories":["Development","Deployment"],"content":"This article covers the different git flows tailored for software projects in professional environment. Each flow is adapted to the context of project scale, the number of developers and the expected delivery cycles. Here we feature Git Flow, Github Flow, Gitlab Flow ","date":"2020-04-23","objectID":"/git-flows-overview/:0:0","tags":["git"],"title":"Git Flows for Management of Software Projects","uri":"/git-flows-overview/"},{"categories":["Development","Deployment"],"content":"Git Flow ","date":"2020-04-23","objectID":"/git-flows-overview/:1:0","tags":["git"],"title":"Git Flows for Management of Software Projects","uri":"/git-flows-overview/"},{"categories":["Development","Deployment"],"content":"Github Flow ","date":"2020-04-23","objectID":"/git-flows-overview/:2:0","tags":["git"],"title":"Git Flows for Management of Software Projects","uri":"/git-flows-overview/"},{"categories":["Development","Deployment"],"content":"Gitlab Flow ","date":"2020-04-23","objectID":"/git-flows-overview/:3:0","tags":["git"],"title":"Git Flows for Management of Software Projects","uri":"/git-flows-overview/"},{"categories":["Development","Deployment"],"content":"Refence Gitlab tutorial Stackoverflow Semantic release ","date":"2020-04-23","objectID":"/git-flows-overview/:4:0","tags":["git"],"title":"Git Flows for Management of Software Projects","uri":"/git-flows-overview/"},{"categories":["Deployment"],"content":"What is Kubernetes Kubernetes is a sophisticated tool for the orchestration of containers in mass deployment. It provides an effective ways to define the software components, resources and deploy them in a controllable and effective manner. The strongest points of Kubernetes is: The abstraction of infrastructure layer to deployment layer. This allows developers and administrators concentrate on the development stage and less worry about the management of the underlying hardware settings. The ability to maintain the accessibility to services Tips ","date":"2020-04-13","objectID":"/kubernetes-cheat-sheet/:1:0","tags":["kubernetes","microk8s","deployment"],"title":"Kubernetes Cheat Sheet","uri":"/kubernetes-cheat-sheet/"},{"categories":["Deployment"],"content":"Install microk8s to have an all-on-one environment for development ","date":"2020-04-13","objectID":"/kubernetes-cheat-sheet/:2:0","tags":["kubernetes","microk8s","deployment"],"title":"Kubernetes Cheat Sheet","uri":"/kubernetes-cheat-sheet/"},{"categories":["Deployment"],"content":"Use kubens and kubectx to switch between clusters and namespaces in kubectl ","date":"2020-04-13","objectID":"/kubernetes-cheat-sheet/:3:0","tags":["kubernetes","microk8s","deployment"],"title":"Kubernetes Cheat Sheet","uri":"/kubernetes-cheat-sheet/"},{"categories":["Deployment"],"content":"Troubleshooting Normally, a k8s basic production-ready deployment features three main resources: ingresses, deployments and services. Further deployment schemes can include other resources such as daemonsets, jobs, storages… Due to the complexity of Kubernetes, it’s not always simple to find out the problems or errors during the deployment process. Some debugging procedures are to the rescue: Kubernetes troubleshooting official guideline. This is the comprehensive instructions provided by Kubernetes itself. Visual diagram. This efficient diagram was created by the team at learnk8s.io. It allows us to debug the deployment in a visual manner. We can easily locate where the problem is in the diagram and find out debugging possibilities. This browser does not support PDFs. Please download the PDF to view it: Download PDF. ","date":"2020-04-13","objectID":"/kubernetes-cheat-sheet/:4:0","tags":["kubernetes","microk8s","deployment"],"title":"Kubernetes Cheat Sheet","uri":"/kubernetes-cheat-sheet/"},{"categories":["Deployment"],"content":"Semantic versioning The versioning of docker images, as per Docker Hub, does not respect the rules of semantic versioning. A single image can share different tags as demonstrated in the photo. The tags feature a Major release, a Major.minor release, and a Major.minor.patch release. ","date":"2020-04-13","objectID":"/virtualization-vs-containerization/:1:0","tags":["docker","deployment"],"title":"Virtualization vs Containerization","uri":"/virtualization-vs-containerization/"},{"categories":["Windows"],"content":"The frustration of having a Linux-like terminal with bash environment for development purpose has been lingering for a while. There are currently many terminal softwares such as HyperTerminal, ConEmu, Cmder, Cygwin and console application such as git bash, WSL, msys, powershell. As a fan of terminator, bash, and oh-my-zsh stack in Linux, I had problems switching to Windows. For Windows, WSL provide a real Linux bash environment, however, its integration with oh-my-zsh library has some font and background problems. For the moment, I prefer using git bash as my favorite console, which satisfies my need for git commands and some vim editing. I particularly like the Ctrl+Insert keyboard shortcut for pasting texts. However, it lacks multi-windows functionality and multi-tabs. This moment, ConEmu comes into play. This guides provide an instruction on how to integrate git bash with ConEmu to have a multi-view window and a multi-tab environment. ","date":"2020-04-11","objectID":"/conemu-git-bash-on-windows/:0:0","tags":["Windows","terminal"],"title":"Multi-windows Linux-like terminal on Windows","uri":"/conemu-git-bash-on-windows/"},{"categories":["Windows"],"content":"Procedure ","date":"2020-04-11","objectID":"/conemu-git-bash-on-windows/:1:0","tags":["Windows","terminal"],"title":"Multi-windows Linux-like terminal on Windows","uri":"/conemu-git-bash-on-windows/"},{"categories":["Windows"],"content":"Install git bash choco install git Add configuration to .bashrc: TBD ","date":"2020-04-11","objectID":"/conemu-git-bash-on-windows/:1:1","tags":["Windows","terminal"],"title":"Multi-windows Linux-like terminal on Windows","uri":"/conemu-git-bash-on-windows/"},{"categories":["Windows"],"content":"Add z for fast navigation There are many directory navigation tools around, fasd, z, autojump, wd (oh-my-zsh plugin), posz. Many of them are optimized for Linux environment. In git bash, the appropriate tool for an easy integration is z. cd ~ git clone https://github.com/rupa/z echo '# jump around directories' \u003e ~/.bashrc echo '. /c/Users/$(whoami)/z.sh' \u003e ~/.bashrc echo 'set $_Z_MAX_SCORE 100 # default 9000' \u003e ~/.bashrc ","date":"2020-04-11","objectID":"/conemu-git-bash-on-windows/:1:2","tags":["Windows","terminal"],"title":"Multi-windows Linux-like terminal on Windows","uri":"/conemu-git-bash-on-windows/"},{"categories":["Windows"],"content":"Install ConEmu using chocolatey # Run the command in Windows command prompt choco install conemu ConEmu settings: TL-DR: import the XML setting file General -\u003e Font: choose Consolas size 12 if integrating git bash If WSL bash environment is also integrated, install powerline font and choose Droid Sans Mono Slashed for Pow General -\u003e Confirm: uncheck all checkboxes in Close confirmations section Startup -\u003e Tasks: Add a new task Git Bash Assign a hotkey Ctrl+Shift+T Check Default task for new console, check Default shell Add launch command: \"C:\\Program Files\\Git\\bin\\sh.exe\" --login -i Startup: ensure Specified named task to be {Git Bash} Keys \u0026 Macro: keys are expected to comply with Linux’s terminator Ctrl+Shift+W: Close active console Ctrl+Shift+E: split the view vertically (already default) Ctrl+Shift+O: split the view horizontally (already default) General: Choose {Git Bash} in Choose the startup task or even a shell with arguments Choose \u003cBabun\u003e color scheme ","date":"2020-04-11","objectID":"/conemu-git-bash-on-windows/:1:3","tags":["Windows","terminal"],"title":"Multi-windows Linux-like terminal on Windows","uri":"/conemu-git-bash-on-windows/"},{"categories":null,"content":"Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I’ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won’t cover using CSS to style your theme. We’ll start with creating a new site with a very basic template. Then we’ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites. In this tutorial, commands that you enter will start with the “$” prompt. The output will follow. Lines that start with “#” are comments that I’ve added to explain a point. When I show updates to a file, the “:wq” on the last line means to save the file. Here’s an example: ## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \"2014-09-28\" title = \"creating a new theme\" +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \"2014-09-28\" title = \"creating a new theme\" +++ bah and humbug $ ","date":"2014-09-28","objectID":"/creating-a-new-theme/:1:0","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Some Definitions There are a few concepts that you need to understand before creating a theme. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:2:0","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Skins Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors. You have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin. Your second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it? The difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it. The rest of this tutorial will call a skin created in the themes/ directory a theme. Note that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:2:1","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"The Home Page The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:2:2","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Site Configuration File When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it. Hugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:2:3","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Content Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML. Front Matter The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON. The information in the front matter is passed into the template before the content is rendered into HTML. Markdown Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:2:4","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Template Files Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it’s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use. There are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template. Hugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site. Please note that you can use the front matter to influence Hugo’s choice of templates. Single Template A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template. List Template A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups. The homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site. Partial Template A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:2:5","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Create a New Site Let’s use Hugo to create a new web site. I’m a Mac user, so I’ll create mine in my home directory, in the Sites folder. If you’re using Linux, you might have to create the folder first. The “new site” command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file. $ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty. The other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That’s a topic for a different tutorial, so please ignore them for now. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:3:0","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Generate the HTML For the New Site Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that’s everything that’s not content). Since we have an empty site, it won’t do much, but it will do it very quickly. $ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The “--verbose” flag gives extra information that will be helpful when we build the template. Every line of the output that starts with “INFO:” or “WARN:” is present because we used that flag. The lines that start with “WARN:” are warning messages. We’ll go over them later. We can verify that the command worked by looking at the directory again. $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you’re ready to publish your web site, that’s the place to start. For now, though, let’s just confirm that we have what we’d expect from a site with no content. $ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:3:1","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Test the New Site Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the “server” command. If it is successful, you will see output similar to the following: $ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it’s on the line that starts with “Web Server”). If everything is working correctly, you should get a page that shows the following: index.xml sitemap.xml That’s a listing of your public/ directory. Hugo didn’t create a home page because our site has no content. When there’s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser. Let’s go back and look at those warnings again. WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial. Now for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page. I like that the verbose flag causes Hugo to list the files that it’s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we’ll cover later that explain the names and paths. For now, just remember that Hugo couldn’t find a template for the home page and it told you so. At this point, you’ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:3:2","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Create a New Theme Hugo doesn’t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes. We’re going to create a new theme called “zafta.” Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional. All themes have opinions on content and layout. For example, Zafta uses “post” over “blog”. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:4:0","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Create a Skeleton Use the hugo “new” command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out. $ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype. Please take a minute to fill out the theme.toml and LICENSE.md files. They’re optional, but if you’re going to be distributing your theme, it tells the world who to praise (or blame). It’s also nice to declare the license so that people will know how they can use the theme. $ vi themes/zafta/theme.toml author = \"michael d henderson\" description = \"a minimal working template\" license = \"MIT\" name = \"zafta\" source_repo = \"\" tags = [\"tags\", \"categories\"] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \"YOUR_NAME_HERE\" Note that the the skeleton’s template files are empty. Don’t worry, we’ll be changing that shortly. $ find themes/zafta -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ ","date":"2014-09-28","objectID":"/creating-a-new-theme/:4:1","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Update the Configuration File to Use the Theme Now that we’ve got a theme to work with, it’s a good idea to add the theme name to the configuration file. This is optional, because you can always add “-t zafta” on all your commands. I like to put it the configuration file because I like shorter command lines. If you don’t put it in the configuration file or specify it on the command line, you won’t use the template that you’re expecting to. Edit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format. $ vi config.toml theme = \"zafta\" baseurl = \"\" languageCode = \"en-us\" title = \"zafta - totally refreshing\" MetaDataFormat = \"toml\" :wq $ ","date":"2014-09-28","objectID":"/creating-a-new-theme/:4:2","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Generate the Site Now that we have an empty theme, let’s generate the site again. $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme’s directory. Let’s check the public/ directory to see what Hugo’s created. $ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things: Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn’t create any pages. That’s because it considers a “page” to be a file created directly from a content file. It doesn’t count things like the index.html files that it creates automatically. The Home Page Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo’s warning message shows that it looks for three different templates: WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can’t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed. When Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page. $ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are. Hugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo’s opinion is that you’ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don’t like that, you can change the directory names in your theme directory or even delete them completely. Hugo’s nice enough to offer its opinion, then behave nicely if you disagree. $ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ ","date":"2014-09-28","objectID":"/creating-a-new-theme/:4:3","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"The Theme Development Cycle When you’re working on a theme, you will make changes in the theme’s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy: Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4. I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes. Check the main Hugo site for information on using Git with Hugo. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:5:0","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Purge the public/ Directory When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it. Note: If you’re building on an SSD, you should ignore this. Churning on a SSD can be costly. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:5:1","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Hugo’s Watch Option Hugo’s “--watch” option will monitor the content/ and your theme directories for changes and rebuild the site automatically. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:5:2","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Live Reload Hugo’s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, “Wow, that’s totally amazing.” ","date":"2014-09-28","objectID":"/creating-a-new-theme/:5:3","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Development Commands Use the following commands as the basis for your workflow. ## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here’s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I’ve said this before, it’s amazing. $ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\"/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\": MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms ","date":"2014-09-28","objectID":"/creating-a-new-theme/:5:4","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Update the Home Page Template The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme’s layout/ directory: index.html _default/list.html _default/single.html We could update one of the default templates, but a good design decision is to update the most specific template available. That’s not a hard and fast rule (in fact, we’ll break it a few times in this tutorial), but it is a good generalization. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:6:0","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Make a Static Home Page Right now, that page is empty because we don’t have any content and we don’t have any logic in the template. Let’s change that by adding some text to the template. $ vi themes/zafta/layouts/index.html \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003cbody\u003e \u003cp\u003ehugo says hello!\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e :wq $ Build the web site and then verify the results. $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003cbody\u003e \u003cp\u003ehugo says hello!\u003c/p\u003e \u003c/html\u003e Live Reload Note: If you’re running the server with the --watch option, you’ll see different content in the file: $ cat public/index.html \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003cbody\u003e \u003cp\u003ehugo says hello!\u003c/p\u003e \u003cscript\u003edocument.write('\u003cscript src=\"http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\"\u003e\u003c/' + 'script\u003e')\u003c/script\u003e\u003c/body\u003e \u003c/html\u003e When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:6:1","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Build a “Dynamic” Home Page “Dynamic home page?” Hugo’s a static web site generator, so this seems an odd thing to say. I mean let’s have the home page automatically reflect the content in the site every time Hugo builds it. We’ll use iteration in the template to do that. Create New Posts Now that we have the home page generating static content, let’s add some content to the site. We’ll display these posts as a list on the home page and on their own page, too. Hugo has a command to generate a skeleton post, just like it does for sites and themes. $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u003cnil\u003e to map[string]interface{} $ That wasn’t very nice, was it? The “new” command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there’s a theme. For me, the workaround was to create an archetypes file specifically for the post type. $ vi themes/zafta/archetypes/post.md +++ Description = \"\" Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \"\" Tags = [] date = \"2014-09-29T21:54:53-05:00\" title = \"first\" +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \"\" Tags = [] date = \"2014-09-29T21:57:09-05:00\" title = \"second\" +++ my second post $ Build the web site and then verify the results. $ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\"category\":\"categories\", \"tag\":\"tags\"} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts: $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn’t show the new content, either. We have to update the templates to add the posts. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:6:2","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"List and Single Templates In Hugo, we have three major kinds of templates. There’s the home page template that we updated previously. It is used only by the home page. We also have “single” templates which are used to generate output for a single content file. We also have “list” templates that are used to group multiple pieces of content before generating output. Generally speaking, list templates are named “list.html” and single templates are named “single.html.” There are three other types of templates: partials, content views, and terms. We will not go into much detail on these. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:6:3","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Add Content to the Homepage The home page will contain a list of posts. Let’s update its template to add the posts that we just created. The logic in the template will run every time we build the site. $ vi themes/zafta/layouts/index.html \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003cbody\u003e {{ range first 10 .Data.Pages }} \u003ch1\u003e{{ .Title }}\u003c/h1\u003e {{ end }} \u003c/body\u003e \u003c/html\u003e :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between “{{” and “}}\". In our template, the commands are: range .Title end The “range” command is an iterator. We’re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created. The “.Title” command prints the value of the “title” variable. Hugo pulls it from the front matter in the Markdown file. The “end” command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds “end.” Everything between the “range” and “end” is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one. It’s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files. Build the web site and then verify the results. $ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\"tag\":\"tags\", \"category\":\"categories\"} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003cbody\u003e \u003ch1\u003esecond\u003c/h1\u003e \u003ch1\u003efirst\u003c/h1\u003e \u003c/body\u003e \u003c/html\u003e $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let’s take a moment to appreciate what we’ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you’ve learned everything you need to know to build a theme. All that’s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine. And, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don’t worry, though, that’s all to come. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:6:4","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Add Content to the Posts We’re working with posts, which are in the content/post/ directory. That means that their section is “post” (and if we don’t do something weird, their type is also “post”). Hugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can’t find one, then it will look in the _default/ directory. There are some twists that we’ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html. Now that we know the search rule, let’s see what we actually have available: $ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don’t know of any other content types, let’s start with updating the default. Remember, any content that we haven’t created a template for will end up using this template. That can be good or bad. Bad because I know that we’re going to be adding different types of content and we’re going to end up undoing some of the changes we’ve made. It’s good because we’ll be able to see immediate results. It’s also good to start here because we can start to build the basic layout for the site. As we add more content types, we’ll refactor this file and move logic around. Hugo makes that fairly painless, so we’ll accept the cost and proceed. Please see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you’re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That’s a refreshing amount of joy right there. Update the Template File $ vi themes/zafta/layouts/_default/single.html \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003e{{ .Title }}\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003e{{ .Title }}\u003c/h1\u003e {{ .Content }} \u003c/body\u003e \u003c/html\u003e :wq $ Build the web site and verify the results. $ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\"tag\":\"tags\", \"category\":\"categories\"} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003efirst\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003efirst\u003c/h1\u003e \u003cp\u003emy first post\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e $ cat public/post/second/index.html \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003esecond\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003esecond\u003c/h1\u003e \u003cp\u003emy second post\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:6:5","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Linking to Content The posts are on the home page. Let’s add a link from there to the post. Since this is the home page, we’ll update its template. $ vi themes/zafta/layouts/index.html \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003cbody\u003e {{ range first 10 .Data.Pages }} \u003ch1\u003e\u003ca href=\"{{ .Permalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/h1\u003e {{ end }} \u003c/body\u003e \u003c/html\u003e Build the web site and verify the results. $ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\"tag\":\"tags\", \"category\":\"categories\"} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003cbody\u003e \u003ch1\u003e\u003ca href=\"/post/second/\"\u003esecond\u003c/a\u003e\u003c/h1\u003e \u003ch1\u003e\u003ca href=\"/post/first/\"\u003efirst\u003c/a\u003e\u003c/h1\u003e \u003c/body\u003e \u003c/html\u003e $ ","date":"2014-09-28","objectID":"/creating-a-new-theme/:6:6","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Create a Post Listing We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let’s make it show a list of all posts (not just the first ten). We need to decide which template to update. This will be a listing, so it should be a list template. Let’s take a quick look and see which list templates are available. $ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don’t have multiple content types, so let’s stay consistent and update the default list template. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:6:7","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Creating Top Level Pages Let’s add an “about” page and display it at the top level (as opposed to a sub-level like we did with posts). The default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let’s verify that by creating an “about” page at the top level: $ vi content/about.md +++ title = \"about\" description = \"about this site\" date = \"2014-09-27\" slug = \"about time\" +++ ## about us i'm speechless :wq Generate the web site and verify the results. $ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn’t created at the top level. It was created in a sub-directory named ‘about-time/'. That name came from our slug. Hugo will use the slug to name the generated content. It’s a reasonable default, by the way, but we can learn a few things by fighting it for this file. One other thing. Take a look at the home page. $ cat public/index.html \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003cbody\u003e \u003ch1\u003e\u003ca href=\"http://localhost:1313/post/theme/\"\u003ecreating a new theme\u003c/a\u003e\u003c/h1\u003e \u003ch1\u003e\u003ca href=\"http://localhost:1313/about-time/\"\u003eabout\u003c/a\u003e\u003c/h1\u003e \u003ch1\u003e\u003ca href=\"http://localhost:1313/post/second-post/\"\u003esecond\u003c/a\u003e\u003c/h1\u003e \u003ch1\u003e\u003ca href=\"http://localhost:1313/post/first-post/\"\u003efirst\u003c/a\u003e\u003c/h1\u003e \u003cscript\u003edocument.write('\u003cscript src=\"http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\"\u003e\u003c/' + 'script\u003e')\u003c/script\u003e\u003c/body\u003e \u003c/html\u003e Notice that the “about” link is listed with the posts? That’s not desirable, so let’s change that first. $ vi themes/zafta/layouts/index.html \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003cbody\u003e \u003ch1\u003eposts\u003c/h1\u003e {{ range first 10 .Data.Pages }} {{ if eq .Type \"post\"}} \u003ch2\u003e\u003ca href=\"{{ .Permalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/h2\u003e {{ end }} {{ end }} \u003ch1\u003epages\u003c/h1\u003e {{ range .Data.Pages }} {{ if eq .Type \"page\" }} \u003ch2\u003e\u003ca href=\"{{ .Permalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/h2\u003e {{ end }} {{ end }} \u003c/body\u003e \u003c/html\u003e :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it. But, that about page still renders to about-time/index.html. $ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let’s do it the hard way and change the permalink in the configuration file. $ vi config.toml [permalinks] page = \"/:title/\" about = \"/:filename/\" Generate the web site and verify that this didn’t work. Hugo lets “slug” or “URL” override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:7:0","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Sharing Templates If you’ve been following along, you probably noticed that posts have titles in the browser and the home page doesn’t. That’s because we didn’t put the title in the home page’s template (layouts/index.html). That’s an easy thing to do, but let’s look at a different option. We can put the common bits into a shared template that’s stored in the themes/zafta/layouts/partials/ directory. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:8:0","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Create the Header and Footer Partials In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme’s presentation. $ vi themes/zafta/layouts/partials/header.html \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003e{{ .Title }}\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e :wq $ vi themes/zafta/layouts/partials/footer.html \u003c/body\u003e \u003c/html\u003e :wq ","date":"2014-09-28","objectID":"/creating-a-new-theme/:8:1","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Update the Home Page Template to Use the Partials The most noticeable difference between a template call and a partials call is the lack of path: {{ template \"theme/partials/header.html\" . }} versus {{ partial \"header.html\" . }} Both pass in the context. Let’s change the home page template to use these new partials. $ vi themes/zafta/layouts/index.html {{ partial \"header.html\" . }} \u003ch1\u003eposts\u003c/h1\u003e {{ range first 10 .Data.Pages }} {{ if eq .Type \"post\"}} \u003ch2\u003e\u003ca href=\"{{ .Permalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/h2\u003e {{ end }} {{ end }} \u003ch1\u003epages\u003c/h1\u003e {{ range .Data.Pages }} {{ if or (eq .Type \"page\") (eq .Type \"about\") }} \u003ch2\u003e\u003ca href=\"{{ .Permalink }}\"\u003e{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u003c/a\u003e\u003c/h2\u003e {{ end }} {{ end }} {{ partial \"footer.html\" . }} :wq Generate the web site and verify the results. The title on the home page is now “your title here”, which comes from the “title” variable in the config.toml file. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:8:2","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Update the Default Single Template to Use the Partials $ vi themes/zafta/layouts/_default/single.html {{ partial \"header.html\" . }} \u003ch1\u003e{{ .Title }}\u003c/h1\u003e {{ .Content }} {{ partial \"footer.html\" . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:8:3","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Add “Date Published” to Posts It’s common to have posts display the date that they were written or published, so let’s add that. The front matter of our posts has a variable named “date.” It’s usually the date the content was created, but let’s pretend that’s the value we want to display. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:9:0","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Add “Date Published” to the Template We’ll start by updating the template used to render the posts. The template code will look like: {{ .Date.Format \"Mon, Jan 2, 2006\" }} Posts use the default single template, so we’ll change that file. $ vi themes/zafta/layouts/_default/single.html {{ partial \"header.html\" . }} \u003ch1\u003e{{ .Title }}\u003c/h1\u003e \u003ch2\u003e{{ .Date.Format \"Mon, Jan 2, 2006\" }}\u003c/h2\u003e {{ .Content }} {{ partial \"footer.html\" . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There’s a problem, though. The “about” page also has the date displayed. As usual, there are a couple of ways to make the date display only on posts. We could do an “if” statement like we did on the home page. Another way would be to create a separate template for posts. The “if” solution works for sites that have just a couple of content types. It aligns with the principle of “code for today,” too. Let’s assume, though, that we’ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we’re going to create a section template. Let’s restore the default single template before we forget. $ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \"header.html\" . }} \u003ch1\u003e{{ .Title }}\u003c/h1\u003e {{ .Content }} {{ partial \"footer.html\" . }} :wq Now we’ll update the post’s version of the single template. If you remember Hugo’s rules, the template engine will use this version over the default. $ vi themes/zafta/layouts/post/single.html {{ partial \"header.html\" . }} \u003ch1\u003e{{ .Title }}\u003c/h1\u003e \u003ch2\u003e{{ .Date.Format \"Mon, Jan 2, 2006\" }}\u003c/h2\u003e {{ .Content }} {{ partial \"footer.html\" . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn’t. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:9:1","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Don’t Repeat Yourself DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you’re figuring that out, accept that you’ll be doing some refactoring. Hugo makes that easy and fast, so it’s okay to delay splitting up a template. ","date":"2014-09-28","objectID":"/creating-a-new-theme/:9:2","tags":null,"title":"Creating a New Theme","uri":"/creating-a-new-theme/"},{"categories":null,"content":"Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like ▾ \u003croot\u003e/ ▾ images/ logo.png should become ▾ \u003croot\u003e/ ▾ static/ ▾ images/ logo.png Additionally, you’ll want any files that should reside at the root (such as CNAME) to be moved to static. ","date":"2014-03-10","objectID":"/migrate-from-jekyll/:1:0","tags":null,"title":"Migrate to Hugo from Jekyll","uri":"/migrate-from-jekyll/"},{"categories":null,"content":"Create your Hugo configuration file Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details. ","date":"2014-03-10","objectID":"/migrate-from-jekyll/:2:0","tags":null,"title":"Migrate to Hugo from Jekyll","uri":"/migrate-from-jekyll/"},{"categories":null,"content":"Set your configuration publish folder to _site The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you’ll want to do one of two alternatives: Change your submodule to point to map gh-pages to public instead of _site (recommended). git submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public Or, change the Hugo configuration to use _site instead of public. { .. \"publishdir\": \"_site\", .. } ","date":"2014-03-10","objectID":"/migrate-from-jekyll/:3:0","tags":null,"title":"Migrate to Hugo from Jekyll","uri":"/migrate-from-jekyll/"},{"categories":null,"content":"Convert Jekyll templates to Hugo templates That’s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll’s template documentation if you need to refresh your memory on how you built your blog and Hugo’s template to learn Hugo’s way. As a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours. ","date":"2014-03-10","objectID":"/migrate-from-jekyll/:4:0","tags":null,"title":"Migrate to Hugo from Jekyll","uri":"/migrate-from-jekyll/"},{"categories":null,"content":"Convert Jekyll plugins to Hugo shortcodes Jekyll has plugins; Hugo has shortcodes. It’s fairly trivial to do a port. ","date":"2014-03-10","objectID":"/migrate-from-jekyll/:5:0","tags":null,"title":"Migrate to Hugo from Jekyll","uri":"/migrate-from-jekyll/"},{"categories":null,"content":"Implementation As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing. Jekyll’s plugin: module Jekyll class ImageTag \u003c Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\"(.*?)\"(\\s+)-\u003e((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\"(.*?)\"/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \"\u003cfigure class='#{@class}'\u003e\" else source = \"\u003cfigure\u003e\" end if @link source += \"\u003ca href=\\\"#{@link}\\\"\u003e\" end source += \"\u003cimg src=\\\"#{@url}\\\"\u003e\" if @link source += \"\u003c/a\u003e\" end source += \"\u003cfigcaption\u003e#{@caption}\u003c/figcaption\u003e\" if @caption source += \"\u003c/figure\u003e\" source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag) is written as this Hugo shortcode: \u003c!-- image --\u003e \u003cfigure {{ with .Get \"class\" }}class=\"{{.}}\"{{ end }}\u003e {{ with .Get \"link\"}}\u003ca href=\"{{.}}\"\u003e{{ end }} \u003cimg src=\"{{ .Get \"src\" }}\" {{ if or (.Get \"alt\") (.Get \"caption\") }}alt=\"{{ with .Get \"alt\"}}{{.}}{{else}}{{ .Get \"caption\" }}{{ end }}\"{{ end }} /\u003e {{ if .Get \"link\"}}\u003c/a\u003e{{ end }} {{ if or (or (.Get \"title\") (.Get \"caption\")) (.Get \"attr\")}} \u003cfigcaption\u003e{{ if isset .Params \"title\" }} {{ .Get \"title\" }}{{ end }} {{ if or (.Get \"caption\") (.Get \"attr\")}}\u003cp\u003e {{ .Get \"caption\" }} {{ with .Get \"attrlink\"}}\u003ca href=\"{{.}}\"\u003e {{ end }} {{ .Get \"attr\" }} {{ if .Get \"attrlink\"}}\u003c/a\u003e {{ end }} \u003c/p\u003e {{ end }} \u003c/figcaption\u003e {{ end }} \u003c/figure\u003e \u003c!-- image --\u003e ","date":"2014-03-10","objectID":"/migrate-from-jekyll/:5:1","tags":null,"title":"Migrate to Hugo from Jekyll","uri":"/migrate-from-jekyll/"},{"categories":null,"content":"Usage I simply changed: {% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \"One of my favorite touristy-type photos. I secretly waited for the good light while we were \"having fun\" and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\" -\u003ehttp://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %} to this (this example uses a slightly extended version named fig, different than the built-in figure): {{% fig class=\"full\" src=\"http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\" title=\"One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\" link=\"http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\" %}} As a bonus, the shortcode named parameters are, arguably, more readable. ","date":"2014-03-10","objectID":"/migrate-from-jekyll/:5:2","tags":null,"title":"Migrate to Hugo from Jekyll","uri":"/migrate-from-jekyll/"},{"categories":null,"content":"Finishing touches ","date":"2014-03-10","objectID":"/migrate-from-jekyll/:6:0","tags":null,"title":"Migrate to Hugo from Jekyll","uri":"/migrate-from-jekyll/"},{"categories":null,"content":"Fix content Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed. ","date":"2014-03-10","objectID":"/migrate-from-jekyll/:6:1","tags":null,"title":"Migrate to Hugo from Jekyll","uri":"/migrate-from-jekyll/"},{"categories":null,"content":"Clean up You’ll want to remove the Jekyll configuration at this point. If you have anything else that isn’t used, delete it. ","date":"2014-03-10","objectID":"/migrate-from-jekyll/:6:2","tags":null,"title":"Migrate to Hugo from Jekyll","uri":"/migrate-from-jekyll/"},{"categories":null,"content":"A practical example in a diff Hey, it’s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff. ","date":"2014-03-10","objectID":"/migrate-from-jekyll/:7:0","tags":null,"title":"Migrate to Hugo from Jekyll","uri":"/migrate-from-jekyll/"},{"categories":null,"content":"Hello. I originated from Da Nang, Vietnam as a student in electrical engineering, majoring in telecommunications and currently is a software engineer in Île-de-France, France. My works revolve around software development and deployment. I have an avid interest in designing and implementing large scale softwares, and distributed systems, which I am learning and discovering progressively, though I have not had very much relevant experience. Machine learning and project management are also under my umbrella of things I’d like to hone. Join me to learn from experimentation, from mistakes and from everybody. Together make a better self more than one of yesterday. Feel free to drop me a message to hophuthai {at} gmail.com if you want to invite me a coffee. ","date":"2020-04-10","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":["development"],"content":"During an internship, I inherited a big project in insurance, featuring the processing and visualization of natural-phenomenon-related risk data and decision making of insurance contracts. The big words of contracts, forewriting, Quotes: “If I don’t do what my manager says, I’ll be fired.” Probably not. Most managers want the truth, even when they don’t act like it. Most managers want good code, even when they are obsessing about the schedule. They may defend the schedule and requirements with passion; but that’s their job. It’s your job to defend the code with equal passion. You will not make the deadline by making the mess. Indeed, the mess will slow you down instantly, and will force you to miss the deadline. The only way to make the deadline - the only way to go fast - is to keep the code as clean as possible at all times. The Boy Scouts of America have a simple rule that we can apply to our profession: Leave the campground cleaner than you found it. If we all checked-in our code a little cleaner than when we checked it out, the code simply could not rot. Variables: You should name a variable using the same care with which you name a first-born child. Naming conventions: Some interesting ones: Use pronounceable names. The length of a name should correspond to the size of its scope (for search-friendliness). Instead of overloading constructors, use static factory methods with names that describe the arguments. Pick one word for one abstract concept and stick with it. For instance, it’s confusing to have fetch, retrieve, and get as equivalent methods of different classes. Functions: They should be short and only do one thing. So, another way to know that a function is doing more than “one thing” is if you can extract another function from it with a name that is not merely a restatement of its implementation. Try to keep the number of arguments as low as possible. 3 or more is a bad smell. Prefer Exception to returning error codes (often simplifies the code path). Comments: Limit use of comments, which may wrongly express the code’s behavior. Except legal comments, information, explanation of intent, clarification, warnings, TODO, JSDoc, public APIs Objects vs Data Structures: Fundamental Dichotomy between objects and data structures: Procedural code (code using data structures) makes it easy to add new functions without changing the existing data structures. OO code, on the other hand, makes it easy to add new classes without changing existing functions. The complement is also true: Procedural code makes it hard to add new data structures because all the functions must change. OO code makes it hard to add new functions because all the classes must change. public class Square { public Point topLeft; public double side; } public class Circle { public Point center; public double radius; } public class Geometry { public final double PI = 3.141592653589793; public double area(Object shape) throws NoSuchShapeException { if (shape instanceof Square) { Square s = (Square)shape; return s.side * s.side; } else if (shape instanceof Circle) { Circle c = (Circle)shape; return PI * c.radius * c.radius; } throw new NoSuchShapeException(); } } in comparison with public class Square implements Shape { private Point topLeft; private double side; public double area() { return side*side; } } public class Circle implements Shape { private Point center; private double radius; public final double PI = 3.141592653589793; public double area() { return PI * radius * radius; } } The Law of Demeter: only talk to tour immediate friend, i.e. do not invoke a function of an object retrieved from another function. x = shapePool.getCircle().getCenter().getX() Classes: The Single Responsibility Principle (SRP) states that a class or module should have one, and only one, reason to change. Procedural code (code using data structures) makes it easy to add new functions without changing the existing data structures. OO code, on the other hand, makes it easy to ad","date":"2017-11-08","objectID":"/clean-code-a-handbook-of-agile-software-craftmanship/:0:0","tags":["development"],"title":"Clean Code - A Handbook of Agile Software Craftsmanship","uri":"/clean-code-a-handbook-of-agile-software-craftmanship/"},{"categories":["development"],"content":"Introduction From the mantra of Test-Driven Development: writing failed tests before writing codes, and eliminating duplication, the three-step rule is put forth: Write a test at first Correct the code to make the test work Refactor Why test-driven development? Where test-driven development not primarily viable? Security Concurrency User interface Organization of the book: Examples of test-driven programming Examples of more complicated programming Design patterns ","date":"2017-10-08","objectID":"/test-driven-development/:0:0","tags":null,"title":"Test-Driven Development By Example","uri":"/test-driven-development/"},{"categories":null,"content":"A post that tries out this set of shortcodes.","date":"2016-12-29","objectID":"/shortcode-tests/","tags":null,"title":"Shortcode Tests","uri":"/shortcode-tests/"},{"categories":null,"content":"Hello, Thanks for downloading and testing our my shortcode pack. Below will load all of the shortcodes and display the various options they have. If you like and enjoy these short codes, please post a link on your blog to GeekThis.net, I would really appreciate it. ","date":"2016-12-29","objectID":"/shortcode-tests/:0:0","tags":null,"title":"Shortcode Tests","uri":"/shortcode-tests/"},{"categories":null,"content":"Installing New Shortcodes To install shortcodes, copy each HTML file relating to a shortcode you want and place it into the shortcode directory inside of Hugo. This location will vary depending on if you are adding shortcodes to a template or to your website. If you are adding shortcodes just to your website, I suggest adding them to the layout directory instead of to a theme. To add a shortcode to your Hugo site, place the HTML file inside of /layouts/shortcodes/. For templates add the shortcode file to /themes/theme-name/layouts/shortcodes/. ","date":"2016-12-29","objectID":"/shortcode-tests/:1:0","tags":null,"title":"Shortcode Tests","uri":"/shortcode-tests/"},{"categories":null,"content":"Twitch Shortcode With Twitch shortcodes, you can specify a variable of either channel or video. If both are set for a single shortcode, only the video variable will be set and channel will be ignored. To get a video ID from Twitch, visit a video page and the ID is the number at the end of the URL, along with the letter in the path name before it. With the example of https://www.twitch.tv/example/v/123456789 the video ID would be v123456789. ","date":"2016-12-29","objectID":"/shortcode-tests/:2:0","tags":null,"title":"Shortcode Tests","uri":"/shortcode-tests/"},{"categories":null,"content":"JSFiddle Shortcode JSFiddle shortcodes embed a read-only JSFiddle and displays the HTML, CSS, JavaScript along with the Result. You can customize the appearance to be either light or dark, adjust the height, and select what tabs to display. To get the JSFiddle ID and Revision Number, visit a JSFiddle and the alphanumeric number as the first section in the path is the identifier. The revision number is the numeric number in the next part of the path. The revision number may not exist can be set to 0 or ignored. With the example url of https://jsfiddle.net/347cw3h4/1/ the ID is 347cw3h4 and the revision number is 1. ","date":"2016-12-29","objectID":"/shortcode-tests/:3:0","tags":null,"title":"Shortcode Tests","uri":"/shortcode-tests/"},{"categories":null,"content":"Pastebin Shortcode Pastebin is a great place to paste source code, logs, and other content that you want to share with others. If you want to share it with your website visitors, you can use the pastebin shortcode. The pastebin shortcode has two options you can set, the pastebin id and the height of the paste to display. The heigt is optional, and if not set, the full height of the paste will be displayed. To get the pastebin ID, go to the paste you want to publish, and in the url, the alphanumeric string directly after the pastebin domain is the pastebin id. Using the URL http://pastebin.com/JwzQbTwh as an example, the pastebin ID would be JwzQbTwh. #pastebin-JwzQbTwh .embedPastebin ol.text { overflow: auto; max-height: 500px; } ","date":"2016-12-29","objectID":"/shortcode-tests/:4:0","tags":null,"title":"Shortcode Tests","uri":"/shortcode-tests/"},{"categories":null,"content":"Google Maps Adding Google Maps can sometimes be useful to add inside of posts or onto pages of your website. Our shortcode provides the general Google Maps Place API to embed a Google Map with a search query. A search can include an address, city, street, or almost any other location. With Google Maps, you need to first setup a Google Maps API Key. It’s free and easy to setup. Visit the Google Developer API Console and create a new application to get your API key. You can store this key inside your Hugo configuration file or each time you ues the shortcode, you can add the API Key to the parameter key. [params] googleMapsAPIKey = \"000000000000\" The Google Maps shortcode accepts the parameters of height, key, and location. The height defaults to 400px if it’s not set and the api key defaults to the site configuration API Key. The location is a search query for a location you want to display for the map. ","date":"2016-12-29","objectID":"/shortcode-tests/:5:0","tags":null,"title":"Shortcode Tests","uri":"/shortcode-tests/"},{"categories":null,"content":"Box Documents If you use Box to share files, adding embedded files to your website is easy. Box provides an embedded view for shared files that displays a preview of almost any file available, such as PDF, DOC, Spreadsheets and others. The box shortcode accepts two parameters, the share ID of the file and the height you want the document to be displayed at. To get the ID of a file inside of Box, right click on a file inside of Box and click on “Share.” The publicly available URL will be similar to https://app.box.com/s/000000000000, you will want to grab the unique string of characters ofter the /s/ path. ","date":"2016-12-29","objectID":"/shortcode-tests/:6:0","tags":null,"title":"Shortcode Tests","uri":"/shortcode-tests/"},{"categories":null,"content":"PDF viewer This browser does not support PDFs. Please download the PDF to view it: Download PDF. ","date":"2016-12-29","objectID":"/shortcode-tests/:7:0","tags":null,"title":"Shortcode Tests","uri":"/shortcode-tests/"},{"categories":["Go"],"content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates. This document is a brief primer on using Go templates. The Go docs provide more details. ","date":"2014-04-02","objectID":"/hugo-template-primer/:0:0","tags":["go","golang","templates","themes","development"],"title":"(Hu)go Template Primer","uri":"/hugo-template-primer/"},{"categories":["Go"],"content":"Introduction to Go Templates Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly. A unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs. ","date":"2014-04-02","objectID":"/hugo-template-primer/:1:0","tags":["go","golang","templates","themes","development"],"title":"(Hu)go Template Primer","uri":"/hugo-template-primer/"},{"categories":["Go"],"content":"Basic Syntax Golang templates are HTML files with the addition of variables and functions. Go variables and functions are accessible within {{ }} Accessing a predefined variable “foo”: {{ foo }} Parameters are separated using spaces Calling the add function with input of 1, 2: {{ add 1 2 }} Methods and fields are accessed via dot notation Accessing the Page Parameter “bar” {{ .Params.bar }} Parentheses can be used to group items together {{ if or (isset .Params \"alt\") (isset .Params \"caption\") }} Caption {{ end }} ","date":"2014-04-02","objectID":"/hugo-template-primer/:2:0","tags":["go","golang","templates","themes","development"],"title":"(Hu)go Template Primer","uri":"/hugo-template-primer/"},{"categories":["Go"],"content":"Variables Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page. A variable is accessed by referencing the variable name. \u003ctitle\u003e{{ .Title }}\u003c/title\u003e Variables can also be defined and referenced. {{ $address := \"123 Main St.\"}} {{ $address }} ","date":"2014-04-02","objectID":"/hugo-template-primer/:3:0","tags":["go","golang","templates","themes","development"],"title":"(Hu)go Template Primer","uri":"/hugo-template-primer/"},{"categories":["Go"],"content":"Functions Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo. Example: {{ add 1 2 }} ","date":"2014-04-02","objectID":"/hugo-template-primer/:4:0","tags":["go","golang","templates","themes","development"],"title":"(Hu)go Template Primer","uri":"/hugo-template-primer/"},{"categories":["Go"],"content":"Includes When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo. Example: {{ template \"chrome/header.html\" . }} ","date":"2014-04-02","objectID":"/hugo-template-primer/:5:0","tags":["go","golang","templates","themes","development"],"title":"(Hu)go Template Primer","uri":"/hugo-template-primer/"},{"categories":["Go"],"content":"Logic Go templates provide the most basic iteration and conditional logic. ","date":"2014-04-02","objectID":"/hugo-template-primer/:6:0","tags":["go","golang","templates","themes","development"],"title":"(Hu)go Template Primer","uri":"/hugo-template-primer/"},{"categories":["Go"],"content":"Iteration Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range. Example 1: Using Context {{ range array }} {{ . }} {{ end }} Example 2: Declaring value variable name {{range $element := array}} {{ $element }} {{ end }} Example 2: Declaring key and value variable name {{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }} ","date":"2014-04-02","objectID":"/hugo-template-primer/:6:1","tags":["go","golang","templates","themes","development"],"title":"(Hu)go Template Primer","uri":"/hugo-template-primer/"},{"categories":["Go"],"content":"Conditionals If, else, with, or, \u0026 and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end. Go Templates treat the following values as false: false 0 any array, slice, map, or string of length zero Example 1: If {{ if isset .Params \"title\" }}\u003ch4\u003e{{ index .Params \"title\" }}\u003c/h4\u003e{{ end }} Example 2: If -\u003e Else {{ if isset .Params \"alt\" }} {{ index .Params \"alt\" }} {{else}} {{ index .Params \"caption\" }} {{ end }} Example 3: And \u0026 Or {{ if and (or (isset .Params \"title\") (isset .Params \"caption\")) (isset .Params \"attr\")}} Example 4: With An alternative way of writing “if” and then referencing the same value is to use “with” instead. With rebinds the context . within its scope, and skips the block if the variable is absent. The first example above could be simplified as: {{ with .Params.title }}\u003ch4\u003e{{ . }}\u003c/h4\u003e{{ end }} Example 5: If -\u003e Else If {{ if isset .Params \"alt\" }} {{ index .Params \"alt\" }} {{ else if isset .Params \"caption\" }} {{ index .Params \"caption\" }} {{ end }} ","date":"2014-04-02","objectID":"/hugo-template-primer/:6:2","tags":["go","golang","templates","themes","development"],"title":"(Hu)go Template Primer","uri":"/hugo-template-primer/"},{"categories":["Go"],"content":"Pipes One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline’s output becomes the input of the following pipe. Because of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline. A few simple examples should help convey how to use the pipe. Example 1 : {{ if eq 1 1 }} Same {{ end }} is the same as {{ eq 1 1 | if }} Same {{ end }} It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes. Example 2 : {{ index .Params \"disqus_url\" | html }} Access the page parameter called “disqus_url” and escape the HTML. Example 3 : {{ if or (or (isset .Params \"title\") (isset .Params \"caption\")) (isset .Params \"attr\")}} Stuff Here {{ end }} Could be rewritten as {{ isset .Params \"caption\" | or isset .Params \"title\" | or isset .Params \"attr\" | if }} Stuff Here {{ end }} ","date":"2014-04-02","objectID":"/hugo-template-primer/:7:0","tags":["go","golang","templates","themes","development"],"title":"(Hu)go Template Primer","uri":"/hugo-template-primer/"},{"categories":["Go"],"content":"Context (aka. the dot) The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context. Example: {{ $title := .Site.Title }} {{ range .Params.tags }} \u003cli\u003e \u003ca href=\"{{ $baseurl }}/tags/{{ . | urlize }}\"\u003e{{ . }}\u003c/a\u003e - {{ $title }} \u003c/li\u003e {{ end }} Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop. Hugo Parameters Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates. ","date":"2014-04-02","objectID":"/hugo-template-primer/:8:0","tags":["go","golang","templates","themes","development"],"title":"(Hu)go Template Primer","uri":"/hugo-template-primer/"},{"categories":["Go"],"content":"Using Content (page) Parameters In each piece of content you can provide variables to be used by the templates. This happens in the front matter. An example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn’t make a lot of sense. We’ve defined a variable in our front matter of some pages to turn off the TOC from being displayed. Here is the example front matter: --- title: \"Permalinks\" date: \"2013-11-18\" aliases: - \"/doc/permalinks/\" groups: [\"extras\"] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template: {{ if not .Params.notoc }} \u003cdiv id=\"toc\" class=\"well col-md-4 col-sm-6\"\u003e {{ .TableOfContents }} \u003c/div\u003e {{ end }} ","date":"2014-04-02","objectID":"/hugo-template-primer/:9:0","tags":["go","golang","templates","themes","development"],"title":"(Hu)go Template Primer","uri":"/hugo-template-primer/"},{"categories":["Go"],"content":"Using Site (config) Parameters In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome. For instance, you might declare: params:CopyrightHTML:\"Copyright \u0026#xA9; 2013 John Doe. All Rights Reserved.\"TwitterUser:\"spf13\"SidebarRecentLimit:5 Within a footer layout, you might then declare a \u003cfooter\u003e which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates. {{if .Site.Params.CopyrightHTML}}\u003cfooter\u003e \u003cdiv class=\"text-center\"\u003e{{.Site.Params.CopyrightHTML | safeHtml}}\u003c/div\u003e \u003c/footer\u003e{{end}} An alternative way of writing the “if” and then referencing the same value is to use “with” instead. With rebinds the context . within its scope, and skips the block if the variable is absent: {{with .Site.Params.TwitterUser}}\u003cspan class=\"twitter\"\u003e \u003ca href=\"https://twitter.com/{{.}}\" rel=\"author\"\u003e \u003cimg src=\"/images/twitter.png\" width=\"48\" height=\"48\" title=\"Twitter: {{.}}\" alt=\"Twitter\"\u003e\u003c/a\u003e \u003c/span\u003e{{end}} Finally, if you want to pull “magic constants” out of your layouts, you can do so, such as in this example: \u003cnav class=\"recent\"\u003e \u003ch1\u003eRecent Posts\u003c/h1\u003e \u003cul\u003e{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u003cli\u003e\u003ca href=\"{{.RelPermalink}}\"\u003e{{.Title}}\u003c/a\u003e\u003c/li\u003e {{end}}\u003c/ul\u003e \u003c/nav\u003e ","date":"2014-04-02","objectID":"/hugo-template-primer/:10:0","tags":["go","golang","templates","themes","development"],"title":"(Hu)go Template Primer","uri":"/hugo-template-primer/"},{"categories":["Go"],"content":"Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture. Save it somewhere specific as we will be using it in the next step. More complete instructions are available at Install Hugo ","date":"2014-04-02","objectID":"/getting-started-with-hugo/:1:0","tags":["go","golang","hugo","development"],"title":"Getting Started with Hugo","uri":"/getting-started-with-hugo/"},{"categories":["Go"],"content":"In Windows The handy way favors chocolatey. For the theme KeepIt, it’s recommended to install the extended version of hugo with SCSS/SASS support. It allows better rendering of the website thanks to the generation of CSS in resources directory from SCSS/SASS styles. choco install hugo-extended ","date":"2014-04-02","objectID":"/getting-started-with-hugo/:1:1","tags":["go","golang","hugo","development"],"title":"Getting Started with Hugo","uri":"/getting-started-with-hugo/"},{"categories":["Go"],"content":"Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now. Follow the following steps: Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands: git clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u003e 29 pages created \u003e 0 tags index created \u003e in 27 ms \u003e Web Server is available at http://localhost:1313 \u003e Press ctrl+c to stop Once you’ve gotten here, follow along the rest of this page on your local build. ","date":"2014-04-02","objectID":"/getting-started-with-hugo/:2:0","tags":["go","golang","hugo","development"],"title":"Getting Started with Hugo","uri":"/getting-started-with-hugo/"},{"categories":["Go"],"content":"Step 3. Change the docs site Stop the Hugo process by hitting Ctrl+C. Now we are going to run hugo again, but this time with hugo in watch mode. /path/to/hugo/from/step/1/hugo server --source=./docs --watch \u003e 29 pages created \u003e 0 tags index created \u003e in 27 ms \u003e Web Server is available at http://localhost:1313 \u003e Watching for changes in /Users/spf13/Code/hugo/docs/content \u003e Press ctrl+c to stop Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo. Content files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md. Change and save this file.. Notice what happened in your terminal. \u003e Change detected, rebuilding site \u003e 29 pages created \u003e 0 tags index created \u003e in 26 ms Refresh the browser and observe that the typo is now fixed. Notice how quick that was. Try to refresh the site before it’s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds. ","date":"2014-04-02","objectID":"/getting-started-with-hugo/:3:0","tags":["go","golang","hugo","development"],"title":"Getting Started with Hugo","uri":"/getting-started-with-hugo/"},{"categories":["Go"],"content":"Step 4. Have fun The best way to learn something is to play with it. ","date":"2014-04-02","objectID":"/getting-started-with-hugo/:4:0","tags":["go","golang","hugo","development"],"title":"Getting Started with Hugo","uri":"/getting-started-with-hugo/"},{"categories":["Go"],"content":"Hugo utilise l’excellente librairie go html/template pour son moteur de modèles. c’est un moteur extrêmement léger qui offre un très petit nombre de fonctions logiques. À notre expérience, c’est juste ce qu’il faut pour créer un bon site web statique. Si vous avez déjà utilisé d’autre moteurs de modèles pour différents langages ou frameworks, vous allez retrouver beaucoup de similitudes avec les modèles go. Ce document est une introduction sur l’utilisation de Go templates. La documentation go fourni plus de détails. ","date":"2014-04-02","objectID":"/introduction-aux-modeles-hugo/:0:0","tags":null,"title":"Introduction aux Modèles (Hu)go","uri":"/introduction-aux-modeles-hugo/"},{"categories":["Go"],"content":"Introduction aux modèles Go Go templates fournit un langage de modèles très simple. Il adhère à la conviction que les modèles ou les vues doivent avoir une logique des plus élémentaires. L’une des conséquences de cette simplicité est que les modèles seront plus rapides a être analysés. Une caractéristique unique de Go templates est qu’il est conscient du contenu. Les variables et le contenu va être nettoyé suivant le contexte d’utilisation. Plus de détails sont disponibles dans la documentation go. ","date":"2014-04-02","objectID":"/introduction-aux-modeles-hugo/:1:0","tags":null,"title":"Introduction aux Modèles (Hu)go","uri":"/introduction-aux-modeles-hugo/"},{"categories":["Go"],"content":"Syntaxe basique Les modèles en langage Go sont des fichiers HTML avec l’ajout de variables et fonctions. Les variables Go et les fonctions sont accessibles avec {{ }} Accès à une variable prédéfinie “foo”: {{ foo }} Les paramètres sont séparés par des espaces Appel de la fonction add avec 1 et 2 en argument** {{ add 1 2 }} Les méthodes et les champs sont accessibles par un point Accès au paramètre de la page “bar” {{ .Params.bar }} Les parenthèses peuvent être utilisées pour grouper des éléments ensemble {{ if or (isset .Params \"alt\") (isset .Params \"caption\") }} Caption {{ end }} ","date":"2014-04-02","objectID":"/introduction-aux-modeles-hugo/:2:0","tags":null,"title":"Introduction aux Modèles (Hu)go","uri":"/introduction-aux-modeles-hugo/"},{"categories":["Go"],"content":"Variables Chaque modèle go a une structure (objet) mis à sa disposition. Avec Hugo, à chaque modèle est passé soit une page, soit une structure de nœud, suivant quel type de page vous rendez. Plus de détails sont disponibles sur la page des variables. Une variable est accessible par son nom. \u003ctitle\u003e{{ .Title }}\u003c/title\u003e Les variables peuvent également être définies et appelées. {{ $address := \"123 Main St.\"}} {{ $address }} ","date":"2014-04-02","objectID":"/introduction-aux-modeles-hugo/:3:0","tags":null,"title":"Introduction aux Modèles (Hu)go","uri":"/introduction-aux-modeles-hugo/"},{"categories":["Go"],"content":"Functions Go templace est livré avec quelques fonctions qui fournissent des fonctionnalités basiques. Le système de Go template fourni également un mécanisme permettant aux applications d'étendre les fonctions disponible. Les fonctions de modèle Hugo fourni quelques fonctionnalités supplémentaires que nous espérons qu’elles seront utiles pour vos sites web. Les functions sont appelées en utilisant leur nom suivi par les paramètres requis séparés par des espaces. Des fonctions de modèles ne peuvent pas être ajoutées sans recompiler Hugo. Exemple: {{ add 1 2 }} ","date":"2014-04-02","objectID":"/introduction-aux-modeles-hugo/:4:0","tags":null,"title":"Introduction aux Modèles (Hu)go","uri":"/introduction-aux-modeles-hugo/"},{"categories":["Go"],"content":"Inclusions Lorsque vous incluez un autre modèle, vous devez y passer les données qu’il sera en mesure d’accèder. Pour passer le contexte actuel, pensez à ajouter un point. La localisation du modèle sera toujours à partir du répertoire /layout/ dans Hugo. Exemple: {{ template \"chrome/header.html\" . }} ","date":"2014-04-02","objectID":"/introduction-aux-modeles-hugo/:5:0","tags":null,"title":"Introduction aux Modèles (Hu)go","uri":"/introduction-aux-modeles-hugo/"},{"categories":["Go"],"content":"Logique Go templates fourni les itérations et la logique conditionnèle des plus basique. ","date":"2014-04-02","objectID":"/introduction-aux-modeles-hugo/:6:0","tags":null,"title":"Introduction aux Modèles (Hu)go","uri":"/introduction-aux-modeles-hugo/"},{"categories":["Go"],"content":"Itération Comme en go, les modèles go utilisent fortement range pour itérer dans une map, un array ou un slice. Les exemples suivant montre différentes façons d’utiliser range Exemple 1: En utilisant le context {{ range array }} {{ . }} {{ end }} Exemple 2: En déclarant un nom de variable {{range $element := array}} {{ $element }} {{ end }} Exemple 2: En déclarant un nom de varialbe pour la clé et la valeur {{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }} ","date":"2014-04-02","objectID":"/introduction-aux-modeles-hugo/:6:1","tags":null,"title":"Introduction aux Modèles (Hu)go","uri":"/introduction-aux-modeles-hugo/"},{"categories":["Go"],"content":"Conditions If, else, with, or, \u0026, and fournissent la base pour la logique conditionnelle avec Go templates. Comme range, chaque déclaration est fermé avec end. Go templates considère les valeurs suivante comme false : false 0 tout array, slice, map ou chaine d’une longueur de zéro Exemple 1: If {{ if isset .Params \"title\" }}\u003ch4\u003e{{ index .Params \"title\" }}\u003c/h4\u003e{{ end }} Exemple 2: If -\u003e Else {{ if isset .Params \"alt\" }} {{ index .Params \"alt\" }} {{else}} {{ index .Params \"caption\" }} {{ end }} Exemple 3: And \u0026 Or {{ if and (or (isset .Params \"title\") (isset .Params \"caption\")) (isset .Params \"attr\")}} Exemple 4: With Une manière alternative d'écrire un “if” et de référencer cette même valeur est d’utiliser “with”. Cela permet de remplacer le contexte . par cet valeur et saute le bloc si la variable est absente. Le premier exemple peut être simplifié à ceci : {{ with .Params.title }}\u003ch4\u003e{{ . }}\u003c/h4\u003e{{ end }} Exemple 5: If -\u003e Else If {{ if isset .Params \"alt\" }} {{ index .Params \"alt\" }} {{ else if isset .Params \"caption\" }} {{ index .Params \"caption\" }} {{ end }} ","date":"2014-04-02","objectID":"/introduction-aux-modeles-hugo/:6:2","tags":null,"title":"Introduction aux Modèles (Hu)go","uri":"/introduction-aux-modeles-hugo/"},{"categories":["Go"],"content":"Pipes L’un des composants le plus puissant de Go templates est la capacité d’empiler les action l’une après l’autre. Cela est fait en utilisant les pipes. Empruntés aux pipes unix, le concept est simple. Chaque sortie de pipeline devient l’entrée du pipe suivant. À cause de la syntaxe très simple de Go templates, le pipe est essentiel pour être capable d’enchainer les appels de fonctions. Une limitation des pipes est qu’il ne peuvent fonctionner seulement avec une seule valeur et cette valeur devient le dernier paramètre du prochain pipeline. Quelques exemples simple devrait vous aider à comprendre comment utiliser les pipes. Exemple 1 : {{ if eq 1 1 }} Same {{ end }} est identique à {{ eq 1 1 | if }} Same {{ end }} Il semble étrange de placer le if à la fin, mais il fournit une bonne illustration de la façon d’utiliser les tuyaux. Exemple 2 : {{ index .Params \"disqus_url\" | html }} Accès au paramètre de page nommé “disqus_url” et échappement du HTML Exemple 3 : {{ if or (or (isset .Params \"title\") (isset .Params \"caption\")) (isset .Params \"attr\")}} Stuff Here {{ end }} Peut être réécrit en {{ isset .Params \"caption\" | or isset .Params \"title\" | or isset .Params \"attr\" | if }} Stuff Here {{ end }} ","date":"2014-04-02","objectID":"/introduction-aux-modeles-hugo/:7:0","tags":null,"title":"Introduction aux Modèles (Hu)go","uri":"/introduction-aux-modeles-hugo/"},{"categories":["Go"],"content":"Contexte (alias. le point) Le concept le plus facilement négligé pour comprendre les modèles go est que {{ . }} fait toujours référence au contexte actuel. Dans le plus haut niveau de votre modèle, ce sera l’ensemble des données mis à votre disposition. Dans une itération, ce sera la valeur de l'élément actuel. Enfin, dans une boucle, le contexte change. . ne fera plus référence aux données disponibles dans la page entière. Si vous avez besoin y d’accèder depuis l’intérieur d’une boucle, il est judicieux d’y définir comme variable au lieu de dépendre du contexte. Exemple: {{ $title := .Site.Title }} {{ range .Params.tags }} \u003cli\u003e \u003ca href=\"{{ $baseurl }}/tags/{{ . | urlize }}\"\u003e {{ . }}\u003c/a\u003e - {{ $title }} \u003c/li\u003e {{ end }} Notez que, une fois que nous sommes entrés dans la boucle, la valeur de {{ . }} a changée. Nous avons défini une variable en dehors de la boucle, afin d’y avoir accès dans la boucle. Les Paramètres d’Hugo Hugo fournit l’option de passer des valeurs au modèle depuis la configuration du site, ou depuis les métadonnées de chaque partie du contenu. Vous pouvez définir n’importe quelle valeur de n’importe quel type (supporté par votre section liminaire / format de configuration) et les utiliser comme vous le souhaitez dans votre modèle. ","date":"2014-04-02","objectID":"/introduction-aux-modeles-hugo/:8:0","tags":null,"title":"Introduction aux Modèles (Hu)go","uri":"/introduction-aux-modeles-hugo/"},{"categories":["Go"],"content":"Utiliser les paramètres de contenu (page) Dans chaque partie du contenu, vous pouvez fournir des variables pour être utilisées par le modèle. Cela se passe dans la section liminaire. Un exemple de cela est utilisé par ce site de documentation. La plupart des pages bénéficient de la présentation de la table des matières. Quelques fois, la table des matières n’a pas beaucoup de sens. Nous avons défini une variable dans notre section liminaire de quelques pages pour désactiver la table des matières. Ceci est un exemple de section liminaire : --- title: \"Permalinks\" date: \"2013-11-18\" aliases: - \"/doc/permalinks/\" groups: [\"extras\"] groups_weight: 30 notoc: true --- Ceci est le code correspondant dans le modèle : {{ if not .Params.notoc }} \u003cdiv id=\"toc\" class=\"well col-md-4 col-sm-6\"\u003e {{ .TableOfContents }} \u003c/div\u003e {{ end }} ","date":"2014-04-02","objectID":"/introduction-aux-modeles-hugo/:9:0","tags":null,"title":"Introduction aux Modèles (Hu)go","uri":"/introduction-aux-modeles-hugo/"},{"categories":["Go"],"content":"Utiliser les paramètres de site (config) Dans votre configuration de plus haut niveau (ex config.yaml), vous pouvez définir des paramètres de site, dont les valeurs vous seront accessibles. Pour les instances, vous pourriez délarer : params:CopyrightHTML:\"Copyright \u0026#xA9; 2013 John Doe. All Rights Reserved.\"TwitterUser:\"spf13\"SidebarRecentLimit:5 Avec un pied de page, vous devriez déclarer un \u003cfooter\u003e qui est affiché seulement si le paramètre CopyrightHTML est déclaré, et si il l’est, vous devriez le déclarer comme HTML-safe, afin d'éviter d'échapper les entités HTML. Cela vous permettra de le modifier facilement dans votre configuration au lieu de le chercher dans votre modèle. {{if .Site.Params.CopyrightHTML}}\u003cfooter\u003e \u003cdiv class=\"text-center\"\u003e{{.Site.Params.CopyrightHTML | safeHtml}}\u003c/div\u003e \u003c/footer\u003e{{end}} Une alternative au “if” et d’appeler la même valeur est d’utiliser “with”. Cela modifiera le contexte et passera le bloc si la variable est absente : {{with .Site.Params.TwitterUser}}\u003cspan class=\"twitter\"\u003e \u003ca href=\"https://twitter.com/{{.}}\" rel=\"author\"\u003e \u003cimg src=\"/images/twitter.png\" width=\"48\" height=\"48\" title=\"Twitter: {{.}}\" alt=\"Twitter\"\u003e\u003c/a\u003e \u003c/span\u003e{{end}} Enfin, si vous souhaitez extraire des “constantes magiques” de vos mises en page, vous pouvez le faire comme dans l’exemple suivant : \u003cnav class=\"recent\"\u003e \u003ch1\u003eRecent Posts\u003c/h1\u003e \u003cul\u003e{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u003cli\u003e\u003ca href=\"{{.RelPermalink}}\"\u003e{{.Title}}\u003c/a\u003e\u003c/li\u003e {{end}}\u003c/ul\u003e \u003c/nav\u003e ","date":"2014-04-02","objectID":"/introduction-aux-modeles-hugo/:10:0","tags":null,"title":"Introduction aux Modèles (Hu)go","uri":"/introduction-aux-modeles-hugo/"}]